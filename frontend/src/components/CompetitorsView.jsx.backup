// frontend/src/components/CompetitorsView.jsx
import React, { useState, useEffect } from 'react';
import CompetitorsTable from './CompetitorsTable';
import AddCompetitorModal from './Modals/AddCompetitorModal';
import ChangeFieldCompetitorModal from './Modals/ChangeFieldCompetitorModal';
import ApplyFiltersModal from './Modals/ApplyFiltersModal';
import axios from 'axios';
import { toast } from 'react-toastify';

// Создаём axios instance для API запросов
const apiClient = axios.create({
  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',
  headers: {
    'Content-Type': 'application/json'
  }
});

const CompetitorsView = ({ onClose }) => {
  const [competitors, setCompetitors] = useState([]);
  const [selectedIds, setSelectedIds] = useState([]);
  const [loading, setLoading] = useState(false);
  const [stats, setStats] = useState(null);
  
  // Модальные окна
  const [showAddModal, setShowAddModal] = useState(false);
  const [showChangeFieldModal, setShowChangeFieldModal] = useState(false);
  const [showFiltersModal, setShowFiltersModal] = useState(false);

  // Загрузка данных при монтировании
  useEffect(() => {
    loadCompetitors();
    loadStats();
  }, []);

  const loadCompetitors = async () => {
    setLoading(true);
    try {
      const response = await apiClient.get('/api/competitors/list');
      if (response.data.success) {
        setCompetitors(response.data.competitors || []);
      } else {
        toast.error('Ошибка загрузки конкурентов');
      }
    } catch (error) {
      console.error('Error loading competitors:', error);
      toast.error('Ошибка загрузки данных');
    } finally {
      setLoading(false);
    }
  };

  const loadStats = async () => {
    try {
      const response = await apiClient.get('/api/competitors/stats');
      if (response.data.success) {
        setStats(response.data.stats);
      }
    } catch (error) {
      console.error('Error loading stats:', error);
    }
  };

  const handleAdd = async (competitorData) => {
    try {
      const response = await apiClient.post('/api/competitors/add', competitorData);
      if (response.data.success) {
        toast.success('Конкурент добавлен');
        loadCompetitors();
        loadStats();
      } else {
        throw new Error(response.data.error || 'Ошибка добавления');
      }
    } catch (error) {
      throw error;
    }
  };

  const handleDataChange = async (id, field, value) => {
    try {
      const response = await apiClient.post('/api/competitors/update', {
        id,
        field,
        value
      });
      
      if (response.data.success) {
        toast.success('Данные обновлены');
        loadCompetitors();
      } else {
        toast.error(response.data.error || 'Ошибка обновления');
      }
    } catch (error) {
      console.error('Error updating competitor:', error);
      toast.error('Ошибка при сохранении');
    }
  };

  const handleDelete = async () => {
    if (selectedIds.length === 0) {
      toast.warning('Выберите записи для удаления');
      return;
    }

    if (!window.confirm(`Удалить выбранные записи (${selectedIds.length})?`)) {
      return;
    }

    try {
      const response = await apiClient.post('/api/competitors/delete', {
        ids: selectedIds
      });

      if (response.data.success) {
        toast.success(response.data.message);
        setSelectedIds([]);
        loadCompetitors();
        loadStats();
      } else {
        toast.error(response.data.error || 'Ошибка удаления');
      }
    } catch (error) {
      console.error('Error deleting competitors:', error);
      toast.error('Ошибка при удалении');
    }
  };

  const handleCopyDomain = () => {
    if (selectedIds.length === 0) {
      toast.warning('Выберите записи');
      return;
    }

    // Находим выбранных конкурентов и копируем их домены
    const selectedCompetitors = competitors.filter(c => selectedIds.includes(c.id));
    const domains = selectedCompetitors.map(c => c.domain).join('\n');
    
    navigator.clipboard.writeText(domains).then(() => {
      toast.success(`Скопировано доменов: ${selectedIds.length}`);
    }).catch(err => {
      console.error('Error copying:', err);
      toast.error('Ошибка копирования');
    });
  };

  const handleChangeField = async (field, value) => {
    if (selectedIds.length === 0) {
      toast.warning('Выберите записи');
      return;
    }

    try {
      // Обновляем каждую выбранную запись
      const promises = selectedIds.map(id => 
        apiClient.post('/api/competitors/update', { id, field, value })
      );

      await Promise.all(promises);
      
      toast.success(`Обновлено записей: ${selectedIds.length}`);
      loadCompetitors();
    } catch (error) {
      console.error('Error updating field:', error);
      toast.error('Ошибка при обновлении');
    }
  };

  const handleUnselectAll = () => {
    setSelectedIds([]);
  };

  return (
    <div className="competitors-view">
      {/* Заголовок со статистикой */}
      <div className="competitors-header">
        <div>
          <h2>Школы-конкуренты</h2>
          {stats && (
            <div className="competitors-stats">
              <div className="stat-item">
                <span className="stat-label">Всего</span>
                <span className="stat-value">{stats.total || 0}</span>
              </div>
              <div className="stat-item">
                <span className="stat-label">Школы</span>
                <span className="stat-value">{stats.schools || 0}</span>
              </div>
              <div className="stat-item">
                <span className="stat-label">Базы репетиторов</span>
                <span className="stat-value">{stats.tutor_bases || 0}</span>
              </div>
            </div>
          )}
        </div>
        <button className="btn btn-secondary" onClick={onClose}>
          Закрыть
        </button>
      </div>

      {/* Кнопки действий */}
      <div style={{ padding: '20px' }}>
        <div className="competitors-actions action-buttons">
          <button 
            className="btn btn-purple" 
            onClick={() => setShowAddModal(true)}
          >
            Добавить новый сайт
          </button>
          <button 
            className="btn btn-blue" 
            onClick={() => setShowFiltersModal(true)}
          >
            Применить фильтры
          </button>
        </div>

        {/* Таблица */}
        <CompetitorsTable
          competitors={competitors}
          loading={loading}
          selectedIds={selectedIds}
          onSelectionChange={setSelectedIds}
          onDataChange={handleDataChange}
        />

        {/* Массовые действия */}
        <div className="competitors-bulk-actions">
          <button 
            className="btn btn-red" 
            onClick={handleDelete}
            disabled={selectedIds.length === 0}
          >
            Удалить ({selectedIds.length})
          </button>
          <button 
            className="btn btn-blue" 
            onClick={handleCopyDomain}
            disabled={selectedIds.length === 0}
          >
            Копировать домен
          </button>
          <button 
            className="btn btn-green" 
            onClick={() => setShowChangeFieldModal(true)}
            disabled={selectedIds.length === 0}
          >
            Изм. польз. значение
          </button>
          <button 
            className="btn btn-dark-blue" 
            onClick={handleUnselectAll}
            disabled={selectedIds.length === 0}
          >
            Снять выделение
          </button>
        </div>
      </div>

      {/* Модальные окна */}
      <AddCompetitorModal
        show={showAddModal}
        onHide={() => setShowAddModal(false)}
        onAdd={handleAdd}
      />

      <ChangeFieldCompetitorModal
        show={showChangeFieldModal}
        onHide={() => setShowChangeFieldModal(false)}
        onSave={handleChangeField}
        selectedCount={selectedIds.length}
      />

      <ApplyFiltersModal
        show={showFiltersModal}
        onHide={() => setShowFiltersModal(false)}
      />
    </div>
  );
};

export default CompetitorsView;
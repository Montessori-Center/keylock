// frontend/src/components/KeywordsTable.jsx - –° –°–û–•–†–ê–ù–ï–ù–ò–ï–ú –®–ò–†–ò–ù–´ –°–¢–û–õ–ë–¶–û–í
import React, { useRef, useEffect, useState } from 'react';
import { HotTable } from '@handsontable/react';
import { registerAllModules } from 'handsontable/registry';
import Handsontable from 'handsontable';
import 'handsontable/dist/handsontable.full.css';

registerAllModules();

const KeywordsTable = ({ 
  keywords, 
  loading, 
  selectedIds, 
  onSelectionChange, 
  onDataChange,
  visibleColumns = []
}) => {
  const hotTableRef = useRef(null);
  const [tableData, setTableData] = useState([]);
  const [columnWidths, setColumnWidths] = useState({});

  // –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
  const allColumns = {
    'selected': { data: 'selected', type: 'checkbox', width: 40, className: 'htCenter', title: '', readOnly: false },
    'id': { data: 'id', title: '‚Ññ', type: 'numeric', width: 50, readOnly: true },
    'keyword': { data: 'keyword', title: 'Keyword', type: 'text', width: 250, readOnly: false },
    'criterion_type': { data: 'criterion_type', title: 'Criterion Type', type: 'dropdown', 
      source: ['Phrase', 'Broad', 'Exact'], width: 120, readOnly: false },
    'max_cpc': { data: 'max_cpc', title: 'Max CPC', type: 'numeric', numericFormat: { pattern: '0.00' }, width: 80, readOnly: false },
    'max_cpm': { data: 'max_cpm', title: 'Max CPM', type: 'numeric', numericFormat: { pattern: '0.00' }, width: 80, readOnly: false },
    'max_cpv': { data: 'max_cpv', title: 'Max CPV', type: 'numeric', numericFormat: { pattern: '0.00' }, width: 80, readOnly: false },
    'first_page_bid': { data: 'first_page_bid', title: 'First page bid', type: 'numeric', numericFormat: { pattern: '0.00' }, width: 120, readOnly: true },
    'top_of_page_bid': { data: 'top_of_page_bid', title: 'Top of page bid', type: 'numeric', numericFormat: { pattern: '0.00' }, width: 120, readOnly: true },
    'first_position_bid': { data: 'first_position_bid', title: 'First position bid', type: 'numeric', numericFormat: { pattern: '0.00' }, width: 120, readOnly: true },
    'quality_score': { data: 'quality_score', title: 'Quality score', type: 'numeric', width: 100, readOnly: true },
    'landing_page_experience': { data: 'landing_page_experience', title: 'Landing page experience', type: 'text', width: 150, readOnly: true },
    'expected_ctr': { data: 'expected_ctr', title: 'Expected CTR', type: 'text', width: 100, readOnly: true },
    'ad_relevance': { data: 'ad_relevance', title: 'Ad relevance', type: 'text', width: 100, readOnly: true },
    'final_url': { data: 'final_url', title: 'Final URL', type: 'text', width: 200, readOnly: false },
    'final_mobile_url': { data: 'final_mobile_url', title: 'Final mobile URL', type: 'text', width: 200, readOnly: false },
    'tracking_template': { data: 'tracking_template', title: 'Tracking template', type: 'text', width: 200, readOnly: false },
    'final_url_suffix': { data: 'final_url_suffix', title: 'Final URL suffix', type: 'text', width: 150, readOnly: false },
    'custom_parameters': { data: 'custom_parameters', title: 'Custom parameters', type: 'text', width: 150, readOnly: false },
    'status': { data: 'status', title: 'Status', type: 'dropdown', source: ['Enabled', 'Paused'], width: 100, readOnly: false },
    'approval_status': { data: 'approval_status', title: 'Approval Status', type: 'text', width: 120, readOnly: true },
    'comment': { data: 'comment', title: 'Comment', type: 'text', width: 150, readOnly: false },
    'has_ads': { data: 'has_ads', title: '–ï—Å—Ç—å —Ä–µ–∫–ª–∞–º–∞?', type: 'dropdown', source: ['–î–∞', '–ù–µ—Ç'], width: 120, className: 'htCenter', readOnly: false },
    'has_school_sites': { data: 'has_school_sites', title: '–ï—Å—Ç—å —Å–∞–π—Ç—ã —à–∫–æ–ª?', type: 'dropdown', source: ['–î–∞', '–ù–µ—Ç'], width: 140, className: 'htCenter', readOnly: false },
    'has_google_maps': { data: 'has_google_maps', title: '–ï—Å—Ç—å Google –∫–∞—Ä—Ç—ã?', type: 'dropdown', source: ['–î–∞', '–ù–µ—Ç'], width: 150, className: 'htCenter', readOnly: false },
    'has_our_site': { data: 'has_our_site', title: '–ï—Å—Ç—å –Ω–∞—à —Å–∞–π—Ç?', type: 'dropdown', source: ['–î–∞', '–ù–µ—Ç'], width: 130, className: 'htCenter', readOnly: false },
    'intent_type': { data: 'intent_type', title: '–¢–∏–ø –∏–Ω—Ç–µ–Ω—Ç–∞', type: 'dropdown', source: ['–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π', '–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π', '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–π'], width: 130, readOnly: false },
    'recommendation': { data: 'recommendation', title: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è', type: 'text', width: 150, readOnly: false },
    'avg_monthly_searches': { data: 'avg_monthly_searches', title: '–°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü', type: 'numeric', width: 180, readOnly: true },
    'three_month_change': { data: 'three_month_change', title: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ —Ç—Ä–∏ –º–µ—Å—è—Ü–∞', type: 'numeric', numericFormat: { pattern: '0.00' }, width: 160, readOnly: true },
    'yearly_change': { data: 'yearly_change', title: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –≥–æ–¥', type: 'numeric', numericFormat: { pattern: '0.00' }, width: 130, readOnly: true },
    'competition': { data: 'competition', title: '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è', type: 'text', width: 110, readOnly: true },
    'competition_percent': { data: 'competition_percent', title: '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è, %', type: 'numeric', numericFormat: { pattern: '0.00' }, width: 120, readOnly: true },
    'min_top_of_page_bid': { data: 'min_top_of_page_bid', title: '–°—Ç–∞–≤–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–≤–µ—Ä—Ö—É —Å—Ç—Ä. (–º–∏–Ω.)', type: 'numeric', numericFormat: { pattern: '0.00' }, width: 200, readOnly: true },
    'max_top_of_page_bid': { data: 'max_top_of_page_bid', title: '–°—Ç–∞–≤–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–≤–µ—Ä—Ö—É —Å—Ç—Ä. (–º–∞–∫—Å.)', type: 'numeric', numericFormat: { pattern: '0.00' }, width: 200, readOnly: true },
    'ad_impression_share': { data: 'ad_impression_share', title: 'Ad impression share', type: 'numeric', numericFormat: { pattern: '0.00' }, width: 150, readOnly: true },
    'organic_average_position': { data: 'organic_average_position', title: 'Organic average position', type: 'numeric', numericFormat: { pattern: '0.00' }, width: 180, readOnly: true },
    'organic_impression_share': { data: 'organic_impression_share', title: 'Organic impression share', type: 'numeric', numericFormat: { pattern: '0.00' }, width: 180, readOnly: true },
    'labels': { data: 'labels', title: 'Labels', type: 'text', width: 150, readOnly: false }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —à–∏—Ä–∏–Ω —Å—Ç–æ–ª–±—Ü–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const savedWidths = localStorage.getItem('keywordsTableColumnWidths');
    if (savedWidths) {
      try {
        const widths = JSON.parse(savedWidths);
        setColumnWidths(widths);
        console.log('üìè Loaded saved column widths:', widths);
      } catch (e) {
        console.error('Error loading column widths:', e);
      }
    }
  }, []);

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —à–∏—Ä–∏–Ω
  const getVisibleColumns = () => {
      // –ü–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ—Ä—è–¥–∫—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
      const columnOrder = [
        'selected',  // –ß–µ–∫–±–æ–∫—Å –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–π
        'id',
        'keyword',
        'criterion_type',
        'max_cpc',
        'max_cpm',
        'max_cpv',
        'first_page_bid',
        'top_of_page_bid',
        'first_position_bid',
        'quality_score',
        'landing_page_experience',
        'expected_ctr',
        'ad_relevance',
        'final_url',
        'final_mobile_url',
        'tracking_template',
        'final_url_suffix',
        'custom_parameters',
        'status',
        'approval_status',
        'comment',
        'has_ads',
        'has_school_sites',
        'has_google_maps',
        'has_our_site',
        'intent_type',
        'recommendation',
        'avg_monthly_searches',
        'three_month_change',
        'yearly_change',
        'competition',
        'competition_percent',
        'min_top_of_page_bid',
        'max_top_of_page_bid',
        'ad_impression_share',
        'organic_average_position',
        'organic_impression_share',
        'labels'
      ];
    
      // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã
      const defaultColumns = [
        'selected', 'id', 'keyword', 'criterion_type', 'max_cpc', 'status', 'comment',
        'has_ads', 'has_school_sites', 'has_google_maps', 'has_our_site',
        'intent_type', 'recommendation', 'avg_monthly_searches',
        'three_month_change', 'yearly_change', 'competition',
        'competition_percent', 'min_top_of_page_bid', 'max_top_of_page_bid'
      ];
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
      let columnsToShow;
      
      if (visibleColumns && visibleColumns.length > 0) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        // –ù–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–∑ columnOrder
        columnsToShow = columnOrder.filter(key => {
          // 'selected' –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
          if (key === 'selected') return true;
          // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –æ–Ω–∏ –≤ visibleColumns
          return visibleColumns.includes(key);
        });
      } else {
        // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        columnsToShow = defaultColumns;
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã –∫–æ–ª–æ–Ω–æ–∫ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —à–∏—Ä–∏–Ω
      return columnsToShow
        .filter(key => allColumns[key]) // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        .map(key => {
          const column = { ...allColumns[key] };
          // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É –µ—Å–ª–∏ –µ—Å—Ç—å
          if (columnWidths[key]) {
            column.width = columnWidths[key];
          }
          return column;
        });
    };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–∞
  const handleAfterColumnResize = (newSize, column, isDoubleClick) => {
    const instance = hotTableRef.current?.hotInstance;
    if (!instance) return;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    const columns = getVisibleColumns();
    const columnKey = columns[column]?.data;
    
    if (columnKey) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —à–∏—Ä–∏–Ω—ã
      const newWidths = {
        ...columnWidths,
        [columnKey]: newSize
      };
      
      setColumnWidths(newWidths);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      localStorage.setItem('keywordsTableColumnWidths', JSON.stringify(newWidths));
      console.log(`üìè Saved column width: ${columnKey} = ${newSize}px`);
    }
  };

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
  useEffect(() => {
    const data = keywords.map(keyword => ({
      selected: selectedIds.includes(keyword.id),
      id: keyword.id,
      keyword: keyword.keyword,
      criterion_type: keyword.criterion_type,
      max_cpc: keyword.max_cpc,
      max_cpm: keyword.max_cpm,
      max_cpv: keyword.max_cpv,
      first_page_bid: keyword.first_page_bid,
      top_of_page_bid: keyword.top_of_page_bid,
      first_position_bid: keyword.first_position_bid,
      quality_score: keyword.quality_score,
      landing_page_experience: keyword.landing_page_experience,
      expected_ctr: keyword.expected_ctr,
      ad_relevance: keyword.ad_relevance,
      final_url: keyword.final_url,
      final_mobile_url: keyword.final_mobile_url,
      tracking_template: keyword.tracking_template,
      final_url_suffix: keyword.final_url_suffix,
      custom_parameters: keyword.custom_parameters,
      status: keyword.status,
      approval_status: keyword.approval_status,
      comment: keyword.comment,
      has_ads: keyword.has_ads ? '–î–∞' : '–ù–µ—Ç',
      has_school_sites: keyword.has_school_sites ? '–î–∞' : '–ù–µ—Ç',
      has_google_maps: keyword.has_google_maps ? '–î–∞' : '–ù–µ—Ç',
      has_our_site: keyword.has_our_site ? '–î–∞' : '–ù–µ—Ç',
      intent_type: keyword.intent_type || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π',
      recommendation: keyword.recommendation,
      avg_monthly_searches: keyword.avg_monthly_searches,
      three_month_change: keyword.three_month_change,
      yearly_change: keyword.yearly_change,
      competition: keyword.competition,
      competition_percent: keyword.competition_percent,
      min_top_of_page_bid: keyword.min_top_of_page_bid,
      max_top_of_page_bid: keyword.max_top_of_page_bid,
      ad_impression_share: keyword.ad_impression_share,
      organic_average_position: keyword.organic_average_position,
      organic_impression_share: keyword.organic_impression_share,
      labels: keyword.labels,
      is_new: keyword.is_new || false,
      batch_color: keyword.batch_color
    }));
    setTableData(data);
  }, [keywords, selectedIds]);

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
  useEffect(() => {
    if (!hotTableRef.current?.hotInstance || tableData.length === 0) return;
    
    const instance = hotTableRef.current.hotInstance;
    
    instance.updateSettings({
      cells: function(row, col) {
        const cellProperties = {};
        const rowData = this.instance.getSourceDataAtRow(row);
        
        if (rowData && rowData.is_new && rowData.batch_color) {
          cellProperties.renderer = function(hotInstance, td, row, col, prop, value, cellProperties) {
            Handsontable.renderers.getRenderer(cellProperties.type)(hotInstance, td, row, col, prop, value, cellProperties);
            
            td.style.backgroundColor = rowData.batch_color;
            td.style.fontWeight = 'bold';
            
            if (col === 0) {
              td.style.borderLeft = `4px solid ${rowData.batch_color}`;
            }
            
            return td;
          };
        }
        
        return cellProperties;
      }
    });
    
    instance.render();
    
  }, [tableData]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ visibleColumns
  useEffect(() => {
    if (!hotTableRef.current?.hotInstance) return;
    
    const instance = hotTableRef.current.hotInstance;
    const newColumns = getVisibleColumns();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
    instance.updateSettings({
      columns: newColumns,
      colHeaders: newColumns.map(col => col.title || '')
    });
    
    console.log('üìä Updated visible columns:', newColumns.map(c => c.data));
  }, [visibleColumns, columnWidths]); // –î–æ–±–∞–≤–∏–ª–∏ columnWidths –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ
  const handleAfterChange = (changes, source) => {
    if (source === 'loadData' || !changes) return;
    
    const checkboxChanges = changes.filter(([row, prop]) => prop === 'selected');
    if (checkboxChanges.length > 0) {
      const newSelectedIds = [];
      tableData.forEach((row, index) => {
        const change = checkboxChanges.find(([r]) => r === index);
        if (change) {
          if (change[3]) {
            newSelectedIds.push(row.id);
          }
        } else if (row.selected) {
          newSelectedIds.push(row.id);
        }
      });
      onSelectionChange(newSelectedIds);
    }
    
    const dataChanges = changes.filter(([row, prop]) => prop !== 'selected');
    if (dataChanges.length > 0 && onDataChange) {
      onDataChange(dataChanges);
    }
  };

  if (loading) {
    return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>;
  }

  const visibleColumnsConfig = getVisibleColumns();

  return (
    <div className="keywords-table-container">
      <HotTable
        ref={hotTableRef}
        data={tableData}
        columns={visibleColumnsConfig}
        colHeaders={true}
        rowHeaders={false}
        height="calc(100vh - 300px)"
        width="100%"
        stretchH="all"
        autoWrapRow={true}
        autoWrapCol={true}
        licenseKey="non-commercial-and-evaluation"
        afterChange={handleAfterChange}
        afterColumnResize={handleAfterColumnResize}
        manualColumnResize={true}
        manualRowResize={true}
        contextMenu={true}
        filters={true}
        dropdownMenu={true}
        columnSorting={true}
        className="keywords-handsontable"
      />
    </div>
  );
};

export default KeywordsTable;
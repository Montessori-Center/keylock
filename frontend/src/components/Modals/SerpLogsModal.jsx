import React, { useState, useEffect } from 'react';
import { Modal, Button, Alert, Table, Badge, Tabs, Tab, ButtonGroup, Row, Col, Card } from 'react-bootstrap';
import { FaSearch, FaClock, FaHistory, FaTimes } from 'react-icons/fa';
import api from '../../services/api';

const parseRawResponse = (log) => {
  if (!log.raw_response) return null;
  
  try {
    const rawResponse = typeof log.raw_response === 'string' 
      ? JSON.parse(log.raw_response) 
      : log.raw_response;
    
    if (rawResponse.tasks && rawResponse.tasks[0] && rawResponse.tasks[0].result) {
      return rawResponse.tasks[0].result[0].items || [];
    }
  } catch (e) {
    console.error('Error parsing raw_response:', e);
  }
  
  return null;
};

const SerpLogsModal = ({ show, onHide, selectedKeywordIds = null }) => {
  const [logs, setLogs] = useState([]);
  const [filteredLogs, setFilteredLogs] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState('list');
  const [selectedLog, setSelectedLog] = useState(null);
  const [isFiltered, setIsFiltered] = useState(false);
  const [historyMode, setHistoryMode] = useState('latest');
  
  // –ù–æ–≤—ã–π state –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ –≤ –¥–µ—Ç–∞–ª—è—Ö
  const [detailsTab, setDetailsTab] = useState('full');

  useEffect(() => {
    if (show) {
      if (selectedKeywordIds && selectedKeywordIds.length > 0) {
        setIsFiltered(true);
        loadLogsForSelected('latest');
      } else {
        setIsFiltered(false);
        loadAllLogs();
      }
    }
  }, [show, selectedKeywordIds]);

  const loadAllLogs = async () => {
    setLoading(true);
    setError(null);
    
    try {
      console.log('üìä Loading all SERP logs');
      const response = await api.getSerpLogs({ limit: 50 });
      
      if (response.success) {
        setLogs(response.logs || []);
        setFilteredLogs(response.logs || []);
        console.log(`üìä Loaded ${response.logs.length} logs`);
      } else {
        setError(response.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤');
      }
    } catch (err) {
      console.error('Error loading SERP logs:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  const loadLogsForSelected = async (mode) => {
    setLoading(true);
    setError(null);
    
    try {
      const keywordIdsStr = selectedKeywordIds.join(',');
      const latestOnly = mode === 'latest';
      
      console.log(`üìä Loading logs for selected keywords: ${keywordIdsStr}, mode: ${mode}`);
      
      const response = await api.getSerpLogs({
        keyword_ids: keywordIdsStr,
        latest_only: latestOnly,
        limit: latestOnly ? selectedKeywordIds.length : 200
      });
      
      if (response.success) {
        setLogs(response.logs || []);
        setFilteredLogs(response.logs || []);
        console.log(`üìä Loaded ${response.logs.length} logs for selected keywords (mode: ${mode})`);
      } else {
        setError(response.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤');
      }
    } catch (err) {
      console.error('Error loading SERP logs:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  const handleHistoryModeChange = (mode) => {
    setHistoryMode(mode);
    if (isFiltered && selectedKeywordIds && selectedKeywordIds.length > 0) {
      loadLogsForSelected(mode);
    }
  };

  const clearFilter = () => {
    setIsFiltered(false);
    setHistoryMode('latest');
    loadAllLogs();
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU');
  };

  const renderLogsTable = () => {
    const displayLogs = filteredLogs;

    if (displayLogs.length === 0) {
      return (
        <Alert variant="info">
          {isFiltered ? 
            '–ù–µ—Ç –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤' : 
            '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö SERP –∞–Ω–∞–ª–∏–∑–∞'}
        </Alert>
      );
    }

    return (
      <Table striped hover size="sm">
        <thead>
          <tr>
            <th width="50">#</th>
            <th width="250">–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ</th>
            <th width="150">–î–∞—Ç–∞</th>
            <th width="80" className="text-center">–†–µ–∫–ª–∞–º–∞</th>
            <th width="80" className="text-center">–ö–∞—Ä—Ç—ã</th>
            <th width="100" className="text-center">–ù–∞—à —Å–∞–π—Ç</th>
            <th width="100" className="text-center">–®–∫–æ–ª—ã</th>
            <th width="100">–ò–Ω—Ç–µ–Ω—Ç</th>
            <th width="100" className="text-center">–ü–æ–∑–∏—Ü–∏–∏</th>
            <th width="80" className="text-right">–°—Ç–æ–∏–º–æ—Å—Ç—å</th>
          </tr>
        </thead>
        <tbody>
          {displayLogs.map((log, idx) => (
            <tr 
              key={log.id}
              onClick={() => {
                setSelectedLog(log);
                setActiveTab('details');
                setDetailsTab('full'); // –°–±—Ä–æ—Å –Ω–∞ –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
              }}
              style={{ cursor: 'pointer' }}
            >
              <td>{idx + 1}</td>
              <td>
                <strong>{log.keyword_text}</strong>
                <br />
                <small className="text-muted">ID: {log.keyword_id}</small>
              </td>
              <td><small>{formatDate(log.created_at)}</small></td>
              
              {/* –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–æ–ª—å–∫–æ –∑–µ–ª—ë–Ω—ã–π/–∫—Ä–∞—Å–Ω—ã–π */}
              <td className="text-center">
                {log.analysis_result.has_ads ? (
                  <Badge bg="success">–î–∞ ({log.analysis_result.paid_count})</Badge>
                ) : (
                  <Badge bg="danger">–ù–µ—Ç</Badge>
                )}
              </td>
              
              {/* –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–æ–ª—å–∫–æ –∑–µ–ª—ë–Ω—ã–π/–∫—Ä–∞—Å–Ω—ã–π */}
              <td className="text-center">
                {log.analysis_result.has_google_maps ? (
                  <Badge bg="success">–î–∞</Badge>
                ) : (
                  <Badge bg="danger">–ù–µ—Ç</Badge>
                )}
              </td>
              
              <td className="text-center">
                {log.analysis_result.has_our_site ? (
                  <Badge bg="success">–î–∞</Badge>
                ) : (
                  <Badge bg="danger">–ù–µ—Ç</Badge>
                )}
              </td>
              
              {/* –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–æ–ª—å–∫–æ –∑–µ–ª—ë–Ω—ã–π/–∫—Ä–∞—Å–Ω—ã–π */}
              <td className="text-center">
                {log.analysis_result.has_school_sites ? (
                  <Badge bg="success">
                    –î–∞ ({log.analysis_result.school_percentage.toFixed(0)}%)
                  </Badge>
                ) : (
                  <Badge bg="danger">–ù–µ—Ç</Badge>
                )}
              </td>
              
              <td>
                <Badge bg={log.analysis_result.intent_type === '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π' ? 'warning' : 'info'}>
                  {log.analysis_result.intent_type}
                </Badge>
              </td>
              
              <td className="text-center">
                {log.analysis_result.has_our_site ? (
                  <div>
                    <small>
                      <strong>–û—Ä–≥:</strong> {log.analysis_result.our_organic_position || 'N/A'}
                      <br />
                      <strong>–§–∞–∫—Ç:</strong> {log.analysis_result.our_actual_position || 'N/A'}
                    </small>
                  </div>
                ) : (
                  <span className="text-muted">‚Äî</span>
                )}
              </td>
              
              <td className="text-right">
                <small>${log.cost.toFixed(4)}</small>
              </td>
            </tr>
          ))}
        </tbody>
      </Table>
    );
  };

  const renderLogDetails = () => {
    if (!selectedLog) {
      return (
        <Alert variant="info">
          –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
        </Alert>
      );
    }

    return (
      <div>
        <Card className="mb-3">
          <Card.Body>
            <h5>üîç {selectedLog.keyword_text}</h5>
            <p className="text-muted mb-3">
              <small>
                <strong>–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:</strong> {formatDate(selectedLog.created_at)}
                <br />
                <strong>–°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> ${selectedLog.cost.toFixed(4)}
              </small>
            </p>

            <div className="mb-3">
              <h6>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</h6>
              <div className="d-flex flex-wrap gap-2">
                <div>
                  <strong>–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:</strong> {(() => {
                    // –°—á–∏—Ç–∞–µ–º –∏–∑ raw_response –µ—Å–ª–∏ –µ—Å—Ç—å
                    if (selectedLog.raw_response) {
                      try {
                        const raw = typeof selectedLog.raw_response === 'string' 
                          ? JSON.parse(selectedLog.raw_response) 
                          : selectedLog.raw_response;
                        return raw.tasks?.[0]?.result?.[0]?.items?.length || 0;
                      } catch (e) {
                        console.error('Error parsing raw_response:', e);
                      }
                    }
                    // –§–æ–ª–±—ç–∫: —Å—á–∏—Ç–∞–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–æ–≤
                    return (selectedLog.organic_results?.length || 0) + 
                           (selectedLog.paid_results?.length || 0) + 
                           (selectedLog.analysis_result?.maps_count || 0);
                  })()}
                </div>
                <div>
                  <strong>–û—Ä–≥–∞–Ω–∏–∫–∞:</strong> {selectedLog.organic_results?.length || 0}
                </div>
                <div>
                  <strong>–†–µ–∫–ª–∞–º–∞:</strong> {selectedLog.paid_results?.length || 0}
                </div>
                <div>
                  <strong>–ö–∞—Ä—Ç—ã:</strong> {selectedLog.analysis_result?.maps_count || 0}
                </div>
              </div>
            </div>

            <div className="mb-3">
              <h6>üè∑Ô∏è –§–ª–∞–≥–∏:</h6>
              <div className="d-flex flex-wrap gap-2">
                {/* –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–æ–ª—å–∫–æ –∑–µ–ª—ë–Ω—ã–π/–∫—Ä–∞—Å–Ω—ã–π */}
                <Badge bg={selectedLog.analysis_result.has_ads ? 'success' : 'danger'}>
                  –†–µ–∫–ª–∞–º–∞: {selectedLog.analysis_result.has_ads ? '–î–ê' : '–ù–ï–¢'}
                </Badge>
                
                <Badge bg={selectedLog.analysis_result.has_google_maps ? 'success' : 'danger'}>
                  Google Maps: {selectedLog.analysis_result.has_google_maps ? '–î–ê' : '–ù–ï–¢'}
                </Badge>
                
                <Badge bg={selectedLog.analysis_result.has_our_site ? 'success' : 'danger'}>
                  –ù–∞—à —Å–∞–π—Ç: {selectedLog.analysis_result.has_our_site ? '–î–ê' : '–ù–ï–¢'}
                </Badge>
                
                {selectedLog.analysis_result.has_our_site && (
                  <div className="ms-2">
                    <small>
                      –û—Ä–≥. –ø–æ–∑–∏—Ü–∏—è: <strong>{selectedLog.analysis_result.our_organic_position || 'N/A'}</strong>
                      {' / '}
                      –§–∞–∫—Ç. –ø–æ–∑–∏—Ü–∏—è: <strong>{selectedLog.analysis_result.our_actual_position || 'N/A'}</strong>
                    </small>
                  </div>
                )}
                
                <Badge bg={selectedLog.analysis_result.has_school_sites ? 'success' : 'danger'}>
                  –°–∞–π—Ç—ã —à–∫–æ–ª: {selectedLog.analysis_result.has_school_sites ? 
                    `–î–ê (${selectedLog.analysis_result.school_percentage.toFixed(0)}%)` : 
                    '–ù–ï–¢'
                  }
                </Badge>
                
                <Badge bg={selectedLog.analysis_result.intent_type === '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π' ? 'warning' : 'info'}>
                  –ò–Ω—Ç–µ–Ω—Ç: {selectedLog.analysis_result.intent_type}
                </Badge>
              </div>
            </div>

            <hr />

            {/* –ù–û–í–û–ï: –í–∫–ª–∞–¥–∫–∏ –¥–ª—è –≤—ã–¥–∞—á–∏ */}
            <Tabs 
              activeKey={detailsTab} 
              onSelect={(k) => setDetailsTab(k)} 
              className="mb-3"
            >
              {/* –í–ö–õ–ê–î–ö–ê 1: –ü–û–õ–ù–ê–Ø –í–´–î–ê–ß–ê */}
              <Tab eventKey="full" title="üìã –ü–æ–ª–Ω–∞—è –≤—ã–¥–∞—á–∞">
                <Alert variant="info" className="mb-3">
                  <small>
                    –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ –≤—ã–¥–∞—á–µ Google (—Ä–µ–∫–ª–∞–º–∞, –∫–∞—Ä—Ç—ã, –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Ç.–¥.)
                  </small>
                </Alert>
                
                {renderFullSerp(selectedLog)}
              </Tab>

              {/* –í–ö–õ–ê–î–ö–ê 2: –¢–û–õ–¨–ö–û –û–†–ì–ê–ù–ò–ö–ê */}
              <Tab eventKey="organic" title="üåê –¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∫–∞">
                <Alert variant="info" className="mb-3">
                  <small>
                    –¢–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ (–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ) —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã –∏ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                  </small>
                </Alert>
                
                {renderOrganicOnly(selectedLog)}
              </Tab>
            </Tabs>

          </Card.Body>
        </Card>
      </div>
    );
  };

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª–Ω–∞—è –≤—ã–¥–∞—á–∞
const renderFullSerp = (log) => {
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤ —Å —Ç–∏–ø–∞–º–∏
  const allItems = [];

  // ====== –î–û–ë–ê–í–õ–Ø–ï–ú –í–°–ï –≠–õ–ï–ú–ï–ù–¢–´ –ò–ó RAW RESPONSE ======
  // –ü–∞—Ä—Å–∏–º raw_response –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  let rawItems = [];
  if (log.raw_response) {
    try {
      const rawResponse = typeof log.raw_response === 'string' 
        ? JSON.parse(log.raw_response) 
        : log.raw_response;
      
      if (rawResponse.tasks && rawResponse.tasks[0] && rawResponse.tasks[0].result) {
        rawItems = rawResponse.tasks[0].result[0].items || [];
      }
    } catch (e) {
      console.error('Error parsing raw_response:', e);
    }
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å raw items ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö (–ø–æ–ª–Ω–∞—è –≤—ã–¥–∞—á–∞)
  if (rawItems.length > 0) {
    rawItems.forEach((item, idx) => {
      const itemType = item.type || 'unknown';
      const rankAbsolute = item.rank_absolute || (idx + 1);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–∞—à–∏–º —Å–∞–π—Ç–æ–º
      let isOurSite = false;
      if (itemType === 'organic' && log.analysis_result.has_our_site) {
        const organicPos = allItems.filter(i => i.type === 'organic').length + 1;
        isOurSite = organicPos === log.analysis_result.our_organic_position;
      }
      
      allItems.push({
        type: itemType,
        position: rankAbsolute,
        domain: item.domain || null,
        title: item.title || getItemTitle(item, itemType),
        url: item.url || null,
        isOurSite: isOurSite,
        rawItem: item // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      });
    });
  } else {
    // –ï—Å–ª–∏ –Ω–µ—Ç raw_response ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º parsed_items (—Ñ–æ–ª–±—ç–∫)
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º—É
    if (log.paid_results && log.paid_results.length > 0) {
      log.paid_results.forEach(item => {
        allItems.push({
          type: 'paid',
          position: item.actual_position || item.position,
          domain: item.domain,
          title: item.title,
          url: item.url
        });
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if (log.organic_results && log.organic_results.length > 0) {
      log.organic_results.forEach(item => {
        allItems.push({
          type: 'organic',
          position: item.actual_position,
          domain: item.domain,
          title: item.title,
          url: item.url,
          isOurSite: log.analysis_result.has_our_site && 
                     item.organic_position === log.analysis_result.our_organic_position
        });
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –∏–∑ parsed_items
    if (log.parsed_items && log.parsed_items.maps) {
      log.parsed_items.maps.forEach(item => {
        allItems.push({
          type: 'map',
          position: item.rank_absolute || 999,
          title: item.title || 'Google Maps'
        });
      });
    }
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏
  allItems.sort((a, b) => a.position - b.position);

  if (allItems.length === 0) {
    return <Alert variant="warning">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–¥–∞—á–µ</Alert>;
  }

  return (
    <Table size="sm" striped hover>
      <thead>
        <tr>
          <th width="80">–ü–æ–∑–∏—Ü–∏—è</th>
          <th width="150">–¢–∏–ø</th>
          <th width="200">–î–æ–º–µ–Ω</th>
          <th>–ó–∞–≥–æ–ª–æ–≤–æ–∫</th>
        </tr>
      </thead>
      <tbody>
        {allItems.map((item, idx) => (
          <tr 
            key={idx}
            style={item.isOurSite ? {
              backgroundColor: '#d4edda',
              fontWeight: '500'
            } : {}}
          >
            <td className="text-center">
              <Badge bg="secondary">{item.position}</Badge>
            </td>
            <td>
              {getTypeBadge(item.type)}
            </td>
            <td>
              <strong>{item.domain || '‚Äî'}</strong>
              {item.isOurSite && 
                <Badge bg="success" className="ms-2">–ù–∞—à —Å–∞–π—Ç</Badge>
              }
            </td>
            <td>
              <small>{item.title}</small>
            </td>
          </tr>
        ))}
      </tbody>
    </Table>
  );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
const getItemTitle = (item, type) => {
  if (item.title) return item.title;
  
  switch (type) {
    case 'people_also_ask':
      return '–õ—é–¥–∏ —Ç–∞–∫–∂–µ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç';
    case 'featured_snippet':
      return '–ò–∑–±—Ä–∞–Ω–Ω—ã–π —Å–Ω–∏–ø–ø–µ—Ç';
    case 'local_pack':
      return '–õ–æ–∫–∞–ª—å–Ω—ã–µ –±–∏–∑–Ω–µ—Å—ã'; // ‚Üê –ò–ó–ú–ï–ù–ï–ù–û
    case 'map':
      return 'Google Maps';
    case 'shopping':
      return '–ü–æ–∫—É–ø–∫–∏';
    case 'images':
      return '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è';
    case 'video':
      return '–í–∏–¥–µ–æ';
    case 'knowledge_graph':
      return '–ì—Ä–∞—Ñ–∏–∫ –∑–Ω–∞–Ω–∏–π';
    case 'refinement_chips':
      return '–£—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞';
    case 'related_searches':
      return '–ü–æ—Ö–æ–∂–∏–µ –∑–∞–ø—Ä–æ—Å—ã'; // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û
    default:
      return `[${type}]`;
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Badge —Ç–∏–ø–∞
const getTypeBadge = (type) => {
  const badges = {
    'paid': <Badge bg="danger">üí∞ –†–µ–∫–ª–∞–º–∞</Badge>,
    'organic': <Badge bg="primary">üåê –û—Ä–≥–∞–Ω–∏–∫–∞</Badge>,
    'map': <Badge bg="info">üó∫Ô∏è Google Maps</Badge>,
    'local_pack': <Badge bg="info">üìç –õ–æ–∫–∞–ª—å–Ω—ã–µ –±–∏–∑–Ω–µ—Å—ã</Badge>, // ‚Üê –ò–ó–ú–ï–ù–ï–ù–û
    'people_also_ask': <Badge bg="secondary">‚ùì –ü–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã</Badge>,
    'featured_snippet': <Badge bg="warning">‚≠ê –°–Ω–∏–ø–ø–µ—Ç</Badge>,
    'shopping': <Badge bg="success">üõí –ü–æ–∫—É–ø–∫–∏</Badge>,
    'images': <Badge bg="secondary">üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</Badge>,
    'video': <Badge bg="danger">üé• –í–∏–¥–µ–æ</Badge>,
    'knowledge_graph': <Badge bg="dark">üìö –ì—Ä–∞—Ñ–∏–∫ –∑–Ω–∞–Ω–∏–π</Badge>,
    'refinement_chips': <Badge bg="light" text="dark">üîç –£—Ç–æ—á–Ω–µ–Ω–∏–µ</Badge>,
    'related_searches': <Badge bg="light" text="dark">üîó –ü–æ—Ö–æ–∂–∏–µ –∑–∞–ø—Ä–æ—Å—ã</Badge> // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û
  };

  return badges[type] || <Badge bg="secondary">{type}</Badge>;
};

  // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∫–∞
  const renderOrganicOnly = (log) => {
    if (!log.organic_results || log.organic_results.length === 0) {
      return <Alert variant="warning">–ù–µ—Ç –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</Alert>;
    }

    return (
      <Table size="sm" striped hover>
        <thead>
          <tr>
            <th width="80">–û—Ä–≥. –ø–æ–∑.</th>
            <th width="80">–§–∞–∫—Ç. –ø–æ–∑.</th>
            <th width="200">–î–æ–º–µ–Ω</th>
            <th>–ó–∞–≥–æ–ª–æ–≤–æ–∫</th>
          </tr>
        </thead>
        <tbody>
          {log.organic_results.map((item, idx) => {
            const isOurSite = log.analysis_result.has_our_site && 
                             item.organic_position === log.analysis_result.our_organic_position;
            
            return (
              <tr 
                key={idx}
                style={isOurSite ? {
                  backgroundColor: '#d4edda',
                  fontWeight: '500'
                } : {}}
              >
                <td className="text-center">
                  <Badge bg="secondary">{item.organic_position}</Badge>
                </td>
                <td className="text-center">
                  <Badge bg="primary">{item.actual_position}</Badge>
                </td>
                <td>
                  <strong>{item.domain}</strong>
                  {isOurSite && 
                    <Badge bg="success" className="ms-2">–ù–∞—à —Å–∞–π—Ç</Badge>
                  }
                </td>
                <td>
                  <small>{item.title}</small>
                </td>
              </tr>
            );
          })}
        </tbody>
      </Table>
    );
  };

  return (
    <Modal show={show} onHide={onHide} size="xl">
      <Modal.Header closeButton className="bg-light">
        <Modal.Title>
          <FaSearch className="me-2" />
          SERP –ê–Ω–∞–ª–∏–∑ - –ò—Å—Ç–æ—Ä–∏—è
          {isFiltered && (
            <Badge bg="primary" className="ms-3">
              –§–∏–ª—å—Ç—Ä: {selectedKeywordIds.length} —Å–ª–æ–≤
            </Badge>
          )}
        </Modal.Title>
      </Modal.Header>
      <Modal.Body style={{ maxHeight: '70vh', overflowY: 'auto' }}>
        {loading ? (
          <div className="text-center py-5">
            <div className="spinner-border text-primary" role="status">
              <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
            </div>
            <p className="mt-3">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
          </div>
        ) : error ? (
          <Alert variant="danger">
            <strong>–û—à–∏–±–∫–∞:</strong> {error}
          </Alert>
        ) : (
          <>
            {isFiltered && selectedKeywordIds.length > 0 && (
              <Alert variant="info" className="d-flex justify-content-between align-items-center">
                <div>
                  <strong>–§–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–µ–Ω:</strong> –ü–æ–∫–∞–∑–∞–Ω—ã –∞–Ω–∞–ª–∏–∑—ã –¥–ª—è {selectedKeywordIds.length} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤
                  <div className="mt-2">
                    <ButtonGroup size="sm">
                      <Button 
                        variant={historyMode === 'latest' ? 'primary' : 'outline-primary'}
                        onClick={() => handleHistoryModeChange('latest')}
                      >
                        <FaClock className="me-1" />
                        –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ
                      </Button>
                      <Button 
                        variant={historyMode === 'all' ? 'primary' : 'outline-primary'}
                        onClick={() => handleHistoryModeChange('all')}
                      >
                        <FaHistory className="me-1" />
                        –í—Å—è –∏—Å—Ç–æ—Ä–∏—è
                      </Button>
                    </ButtonGroup>
                  </div>
                </div>
                <Button 
                  variant="outline-secondary" 
                  size="sm" 
                  onClick={clearFilter}
                >
                  <FaTimes className="me-1" />
                  –°–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä
                </Button>
              </Alert>
            )}
            
            <Tabs activeKey={activeTab} onSelect={setActiveTab} className="mb-3">
              <Tab eventKey="list" title={`üìã –°–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤ (${filteredLogs.length})`}>
                {renderLogsTable()}
              </Tab>
              <Tab eventKey="details" title="üìä –î–µ—Ç–∞–ª–∏">
                {renderLogDetails()}
              </Tab>
            </Tabs>
          </>
        )}
      </Modal.Body>
      <Modal.Footer>
        <Button 
          variant="primary" 
          onClick={() => {
            if (isFiltered && selectedKeywordIds.length > 0) {
              loadLogsForSelected(historyMode);
            } else {
              loadAllLogs();
            }
          }} 
          disabled={loading}
        >
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å
        </Button>
        <Button variant="secondary" onClick={onHide}>
          –ó–∞–∫—Ä—ã—Ç—å
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

export default SerpLogsModal;
// frontend/src/components/Modals/SerpLogsModal.jsx - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import React, { useState, useEffect } from 'react';
import { Modal, Button, Table, Badge, Alert, Tabs, Tab, Card, ButtonGroup } from 'react-bootstrap';
import { FaSearch, FaCheckCircle, FaTimesCircle, FaMapMarkerAlt, FaDollarSign, FaTimes, FaClock, FaHistory } from 'react-icons/fa';
import api from '../../services/api';

const SerpLogsModal = ({ show, onHide, selectedKeywordIds = [] }) => {
  const [logs, setLogs] = useState([]);
  const [filteredLogs, setFilteredLogs] = useState([]);
  const [selectedLog, setSelectedLog] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState('list');
  const [isFiltered, setIsFiltered] = useState(false);
  const [historyMode, setHistoryMode] = useState('latest'); // 'latest' –∏–ª–∏ 'all'

  useEffect(() => {
    if (show) {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
      if (selectedKeywordIds && selectedKeywordIds.length > 0) {
        setIsFiltered(true);
        setHistoryMode('latest'); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ
        loadLogsForSelected('latest');
      } else {
        loadAllLogs();
      }
    }
  }, [show]);

  const loadAllLogs = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await api.getSerpLogs({ limit: 50 });
      
      if (response.success) {
        setLogs(response.logs || []);
        setFilteredLogs(response.logs || []);
      } else {
        setError(response.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤');
      }
    } catch (err) {
      console.error('Error loading SERP logs:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  const loadLogsForSelected = async (mode = 'latest') => {
    if (!selectedKeywordIds || selectedKeywordIds.length === 0) {
      return;
    }

    setLoading(true);
    setError(null);
    try {
      const response = await api.getSerpLogs({
        keywordIds: selectedKeywordIds,
        latestOnly: mode === 'latest',
        limit: mode === 'all' ? 200 : 50
      });
      
      if (response.success) {
        setLogs(response.logs || []);
        setFilteredLogs(response.logs || []);
        console.log(`üìä Loaded ${response.logs.length} logs for selected keywords (mode: ${mode})`);
      } else {
        setError(response.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤');
      }
    } catch (err) {
      console.error('Error loading SERP logs:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  const handleHistoryModeChange = (mode) => {
    setHistoryMode(mode);
    if (isFiltered && selectedKeywordIds && selectedKeywordIds.length > 0) {
      loadLogsForSelected(mode);
    }
  };

  const clearFilter = () => {
    setIsFiltered(false);
    setHistoryMode('latest');
    loadAllLogs();
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU');
  };

  const renderLogsTable = () => {
    const displayLogs = filteredLogs;

    if (displayLogs.length === 0) {
      return (
        <Alert variant="info">
          {isFiltered ? 
            '–ù–µ—Ç –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤' : 
            '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö SERP –∞–Ω–∞–ª–∏–∑–∞'}
        </Alert>
      );
    }

    return (
      <Table striped hover size="sm">
        <thead>
          <tr>
            <th width="50">#</th>
            <th width="250">–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ</th>
            <th width="150">–î–∞—Ç–∞</th>
            <th width="80" className="text-center">–†–µ–∫–ª–∞–º–∞</th>
            <th width="80" className="text-center">–ö–∞—Ä—Ç—ã</th>
            <th width="100" className="text-center">–ù–∞—à —Å–∞–π—Ç</th>
            <th width="100" className="text-center">–®–∫–æ–ª—ã</th>
            <th width="100">–ò–Ω—Ç–µ–Ω—Ç</th>
            <th width="100" className="text-center">–ü–æ–∑–∏—Ü–∏–∏</th>
            <th width="80" className="text-right">–°—Ç–æ–∏–º–æ—Å—Ç—å</th>
          </tr>
        </thead>
        <tbody>
          {displayLogs.map((log, idx) => (
            <tr 
              key={log.id}
              onClick={() => {
                setSelectedLog(log);
                setActiveTab('details');
              }}
              style={{ cursor: 'pointer' }}
            >
              <td>{idx + 1}</td>
              <td>
                <strong>{log.keyword_text}</strong>
                <br />
                <small className="text-muted">ID: {log.keyword_id}</small>
              </td>
              <td><small>{formatDate(log.created_at)}</small></td>
              
              {/* –†–µ–∫–ª–∞–º–∞ */}
              <td className="text-center">
                {log.analysis_result.has_ads ? (
                  <Badge bg="danger">–î–∞ ({log.analysis_result.paid_count})</Badge>
                ) : (
                  <Badge bg="secondary">–ù–µ—Ç</Badge>
                )}
              </td>
              
              {/* –ö–∞—Ä—Ç—ã */}
              <td className="text-center">
                {log.analysis_result.has_google_maps ? (
                  <Badge bg="info">
                    <FaMapMarkerAlt /> –î–∞
                  </Badge>
                ) : (
                  <Badge bg="secondary">–ù–µ—Ç</Badge>
                )}
              </td>
              
              {/* –ù–∞—à —Å–∞–π—Ç */}
              <td className="text-center">
                {log.analysis_result.has_our_site ? (
                  <Badge bg="success">
                    <FaCheckCircle /> –î–∞
                  </Badge>
                ) : (
                  <Badge bg="danger">
                    <FaTimesCircle /> –ù–µ—Ç
                  </Badge>
                )}
              </td>
              
              {/* –®–∫–æ–ª—ã */}
              <td className="text-center">
                {log.analysis_result.has_school_sites ? (
                  <Badge bg="warning">
                    –î–∞ ({log.analysis_result.school_percentage.toFixed(0)}%)
                  </Badge>
                ) : (
                  <Badge bg="secondary">–ù–µ—Ç</Badge>
                )}
              </td>
              
              {/* –ò–Ω—Ç–µ–Ω—Ç */}
              <td>
                <Badge bg={log.analysis_result.intent_type === '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π' ? 'success' : 'info'}>
                  {log.analysis_result.intent_type}
                </Badge>
              </td>
              
              {/* –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∑–∏—Ü–∏–∏ */}
              <td className="text-center">
                {log.analysis_result.has_our_site ? (
                  <div>
                    <small>
                      –û—Ä–≥: <strong>{log.analysis_result.our_organic_position || 'N/A'}</strong>
                      <br />
                      –§–∞–∫—Ç: <strong>{log.analysis_result.our_actual_position || 'N/A'}</strong>
                    </small>
                  </div>
                ) : (
                  <small className="text-muted">‚Äî</small>
                )}
              </td>
              
              {/* –°—Ç–æ–∏–º–æ—Å—Ç—å */}
              <td className="text-right">
                <small>
                  <FaDollarSign />
                  {log.cost.toFixed(4)}
                </small>
              </td>
            </tr>
          ))}
        </tbody>
      </Table>
    );
  };

  const renderLogDetails = () => {
    if (!selectedLog) {
      return (
        <Alert variant="info">
          –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
        </Alert>
      );
    }

    const isCommercial = selectedLog.analysis_result.intent_type === '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π';

    return (
      <div>
        <Card className="mb-3">
          <Card.Header className="bg-primary text-white">
            <h5 className="mb-0">
              <FaSearch className="me-2" />
              {selectedLog.keyword_text}
            </h5>
          </Card.Header>
          <Card.Body>
            <div className="row">
              <div className="col-md-6">
                <h6>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h6>
                <ul className="list-unstyled">
                  <li>
                    <strong>–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:</strong> {formatDate(selectedLog.created_at)}
                  </li>
                  <li>
                    <strong>–ò–Ω—Ç–µ–Ω—Ç:</strong>{' '}
                    <Badge bg={isCommercial ? 'success' : 'info'} className="ms-2">
                      {selectedLog.analysis_result.intent_type}
                    </Badge>
                  </li>
                  <li>
                    <strong>–°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> ${selectedLog.cost.toFixed(4)}
                  </li>
                </ul>
              </div>
              <div className="col-md-6">
                <h6>–§–ª–∞–≥–∏:</h6>
                <ul className="list-unstyled">
                  <li>
                    <strong>–†–µ–∫–ª–∞–º–∞:</strong>{' '}
                    <Badge bg={selectedLog.analysis_result.has_ads ? 'danger' : 'secondary'}>
                      {selectedLog.analysis_result.has_ads ? `–î–∞ (${selectedLog.analysis_result.paid_count})` : '–ù–µ—Ç'}
                    </Badge>
                  </li>
                  <li>
                    <strong>Google Maps:</strong>{' '}
                    <Badge bg={selectedLog.analysis_result.has_google_maps ? 'info' : 'secondary'}>
                      {selectedLog.analysis_result.has_google_maps ? '–î–∞' : '–ù–µ—Ç'}
                    </Badge>
                  </li>
                  <li>
                    <strong>–ù–∞—à —Å–∞–π—Ç:</strong>{' '}
                    <Badge bg={selectedLog.analysis_result.has_our_site ? 'success' : 'danger'}>
                      {selectedLog.analysis_result.has_our_site ? '–î–∞' : '–ù–µ—Ç'}
                    </Badge>
                    {selectedLog.analysis_result.has_our_site && (
                      <div className="mt-2">
                        <small>
                          –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–∑–∏—Ü–∏—è: <strong>{selectedLog.analysis_result.our_organic_position || 'N/A'}</strong>
                          <br />
                          –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∑–∏—Ü–∏—è: <strong>{selectedLog.analysis_result.our_actual_position || 'N/A'}</strong>
                        </small>
                      </div>
                    )}
                  </li>
                  <li>
                    <strong>–°–∞–π—Ç—ã —à–∫–æ–ª:</strong>{' '}
                    <Badge bg={selectedLog.analysis_result.has_school_sites ? 'warning' : 'secondary'}>
                      {selectedLog.analysis_result.has_school_sites ? 
                        `–î–∞ (${selectedLog.analysis_result.school_percentage.toFixed(0)}%)` : 
                        '–ù–µ—Ç'
                      }
                    </Badge>
                  </li>
                </ul>
              </div>
            </div>

            <hr />

            <h6>üåê –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞:</h6>
            <Table size="sm" striped hover>
              <thead>
                <tr>
                  <th width="80">–û—Ä–≥. –ø–æ–∑.</th>
                  <th width="80">–§–∞–∫—Ç. –ø–æ–∑.</th>
                  <th width="200">–î–æ–º–µ–Ω</th>
                  <th>–ó–∞–≥–æ–ª–æ–≤–æ–∫</th>
                </tr>
              </thead>
              <tbody>
                {selectedLog.organic_results && selectedLog.organic_results.length > 0 ? (
                  selectedLog.organic_results.map((item, idx) => {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–∞—à–∏–º —Å–∞–π—Ç–æ–º
                    const isOurSite = selectedLog.analysis_result.has_our_site && 
                                     item.organic_position === selectedLog.analysis_result.our_organic_position;
                    
                    return (
                      <tr 
                        key={idx}
                        style={isOurSite ? {
                          backgroundColor: '#d4edda',
                          fontWeight: '500'
                        } : {}}
                      >
                        <td className="text-center">
                          <Badge bg="secondary">{item.organic_position}</Badge>
                        </td>
                        <td className="text-center">
                          <Badge bg="primary">{item.actual_position}</Badge>
                        </td>
                        <td>
                          <strong>{item.domain}</strong>
                          {isOurSite && 
                            <Badge bg="success" className="ms-2">–ù–∞—à —Å–∞–π—Ç</Badge>
                          }
                        </td>
                        <td>
                          <small>{item.title}</small>
                        </td>
                      </tr>
                    );
                  })
                ) : (
                  <tr>
                    <td colSpan="4" className="text-center text-muted">
                      –ù–µ—Ç –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    </td>
                  </tr>
                )}
              </tbody>
            </Table>

            {selectedLog.paid_results && selectedLog.paid_results.length > 0 && (
              <>
                <hr />
                <h6>üí∞ –†–µ–∫–ª–∞–º–Ω—ã–µ –±–ª–æ–∫–∏:</h6>
                <Table size="sm" striped>
                  <thead>
                    <tr>
                      <th width="80">–ü–æ–∑–∏—Ü–∏—è</th>
                      <th>–î–æ–º–µ–Ω</th>
                      <th>–ó–∞–≥–æ–ª–æ–≤–æ–∫</th>
                    </tr>
                  </thead>
                  <tbody>
                    {selectedLog.paid_results.map((item, idx) => (
                      <tr key={idx}>
                        <td className="text-center">
                          <Badge bg="danger">{item.position}</Badge>
                        </td>
                        <td>{item.domain}</td>
                        <td><small>{item.title}</small></td>
                      </tr>
                    ))}
                  </tbody>
                </Table>
              </>
            )}
          </Card.Body>
        </Card>
      </div>
    );
  };

  return (
    <Modal show={show} onHide={onHide} size="xl">
      <Modal.Header closeButton className="bg-light">
        <Modal.Title>
          <FaSearch className="me-2" />
          SERP –ê–Ω–∞–ª–∏–∑ - –ò—Å—Ç–æ—Ä–∏—è
          {isFiltered && (
            <Badge bg="primary" className="ms-3">
              –§–∏–ª—å—Ç—Ä: {selectedKeywordIds.length} —Å–ª–æ–≤
            </Badge>
          )}
        </Modal.Title>
      </Modal.Header>
      <Modal.Body style={{ maxHeight: '70vh', overflowY: 'auto' }}>
        {loading ? (
          <div className="text-center py-5">
            <div className="spinner-border text-primary" role="status">
              <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
            </div>
            <p className="mt-3">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
          </div>
        ) : error ? (
          <Alert variant="danger">
            <strong>–û—à–∏–±–∫–∞:</strong> {error}
          </Alert>
        ) : (
          <>
            {isFiltered && selectedKeywordIds.length > 0 && (
              <Alert variant="info" className="d-flex justify-content-between align-items-center">
                <div>
                  <strong>–§–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–µ–Ω:</strong> –ü–æ–∫–∞–∑–∞–Ω—ã –∞–Ω–∞–ª–∏–∑—ã –¥–ª—è {selectedKeywordIds.length} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤
                  <div className="mt-2">
                    <ButtonGroup size="sm">
                      <Button 
                        variant={historyMode === 'latest' ? 'primary' : 'outline-primary'}
                        onClick={() => handleHistoryModeChange('latest')}
                      >
                        <FaClock className="me-1" />
                        –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ
                      </Button>
                      <Button 
                        variant={historyMode === 'all' ? 'primary' : 'outline-primary'}
                        onClick={() => handleHistoryModeChange('all')}
                      >
                        <FaHistory className="me-1" />
                        –í—Å—è –∏—Å—Ç–æ—Ä–∏—è
                      </Button>
                    </ButtonGroup>
                  </div>
                </div>
                <Button 
                  variant="outline-secondary" 
                  size="sm" 
                  onClick={clearFilter}
                >
                  <FaTimes className="me-1" />
                  –°–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä
                </Button>
              </Alert>
            )}
            
            <Tabs activeKey={activeTab} onSelect={setActiveTab} className="mb-3">
              <Tab eventKey="list" title={`üìã –°–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤ (${filteredLogs.length})`}>
                {renderLogsTable()}
              </Tab>
              <Tab eventKey="details" title="üìä –î–µ—Ç–∞–ª–∏">
                {renderLogDetails()}
              </Tab>
            </Tabs>
          </>
        )}
      </Modal.Body>
      <Modal.Footer>
        <Button 
          variant="primary" 
          onClick={() => {
            if (isFiltered && selectedKeywordIds.length > 0) {
              loadLogsForSelected(historyMode);
            } else {
              loadAllLogs();
            }
          }} 
          disabled={loading}
        >
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å
        </Button>
        <Button variant="secondary" onClick={onHide}>
          –ó–∞–∫—Ä—ã—Ç—å
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

export default SerpLogsModal;
// frontend/src/components/Modals/SerpLogsModal.jsx
import React, { useState, useEffect } from 'react';
import { Modal, Button, Table, Badge, Alert, Tabs, Tab, Card } from 'react-bootstrap';
import { FaSearch, FaCheckCircle, FaTimesCircle, FaMapMarkerAlt, FaDollarSign } from 'react-icons/fa';

const SerpLogsModal = ({ show, onHide, keywordId = null }) => {
  const [logs, setLogs] = useState([]);
  const [selectedLog, setSelectedLog] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState('list');

  useEffect(() => {
    if (show) {
      loadLogs();
    }
  }, [show, keywordId]);

  const loadLogs = async () => {
    setLoading(true);
    setError(null);
    try {
      const url = keywordId 
        ? `/api/dataforseo/serp-logs?keyword_id=${keywordId}`
        : '/api/dataforseo/serp-logs?limit=20';
      
      const response = await fetch(url);
      const data = await response.json();
      
      if (data.success) {
        setLogs(data.logs || []);
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤');
      }
    } catch (err) {
      console.error('Error loading logs:', err);
      setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    } finally {
      setLoading(false);
    }
  };

  const loadLogDetails = async (logId) => {
    try {
      const response = await fetch(`/api/dataforseo/serp-logs/${logId}`);
      const data = await response.json();
      
      if (data.success) {
        setSelectedLog(data.report);
        setActiveTab('details');
      }
    } catch (err) {
      console.error('Error loading log details:', err);
    }
  };

  const formatDate = (dateStr) => {
    if (!dateStr) return '-';
    return new Date(dateStr).toLocaleString('ru-RU');
  };

  const renderLogsTable = () => (
    <div className="table-responsive">
      <Table striped hover size="sm">
        <thead>
          <tr>
            <th>–î–∞—Ç–∞</th>
            <th>–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ</th>
            <th>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</th>
            <th>–§–ª–∞–≥–∏</th>
            <th>–ò–Ω—Ç–µ–Ω—Ç</th>
            <th>–°—Ç–æ–∏–º–æ—Å—Ç—å</th>
            <th>–î–µ–π—Å—Ç–≤–∏—è</th>
          </tr>
        </thead>
        <tbody>
          {logs.map(log => (
            <tr key={log.id}>
              <td>{formatDate(log.created_at)}</td>
              <td><strong>{log.keyword}</strong></td>
              <td>
                <small>
                  –û—Ä–≥–∞–Ω–∏–∫–∞: {log.summary.organic}<br/>
                  –†–µ–∫–ª–∞–º–∞: {log.summary.paid}<br/>
                  –ö–∞—Ä—Ç—ã: {log.summary.maps}
                </small>
              </td>
              <td>
                {log.flags.has_ads && <Badge bg="warning" className="me-1">–†–µ–∫–ª–∞–º–∞</Badge>}
                {log.flags.has_maps && <Badge bg="info" className="me-1">–ö–∞—Ä—Ç—ã</Badge>}
                {log.flags.has_our_site && <Badge bg="success" className="me-1">–ù–∞—à —Å–∞–π—Ç</Badge>}
                {log.flags.has_school_sites && <Badge bg="danger" className="me-1">–®–∫–æ–ª—ã</Badge>}
              </td>
              <td>
                <Badge bg={log.intent === '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π' ? 'success' : 'secondary'}>
                  {log.intent}
                </Badge>
                {log.school_percentage > 0 && (
                  <small className="d-block">{log.school_percentage.toFixed(1)}% —à–∫–æ–ª</small>
                )}
              </td>
              <td>${log.cost.toFixed(4)}</td>
              <td>
                <Button 
                  size="sm" 
                  variant="outline-primary"
                  onClick={() => loadLogDetails(log.id)}
                >
                  –î–µ—Ç–∞–ª–∏
                </Button>
              </td>
            </tr>
          ))}
        </tbody>
      </Table>
    </div>
  );

  const renderLogDetails = () => {
    if (!selectedLog) return null;

    return (
      <div>
        <Card className="mb-3">
          <Card.Header className="bg-primary text-white">
            <h5>{selectedLog.keyword}</h5>
            <small>{formatDate(selectedLog.created_at)}</small>
          </Card.Header>
          <Card.Body>
            <div className="row">
              <div className="col-md-6">
                <h6>üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:</h6>
                <ul className="list-unstyled">
                  <li>üìç –õ–æ–∫–∞—Ü–∏—è: {selectedLog.parameters.location_code}</li>
                  <li>üåê –Ø–∑—ã–∫: {selectedLog.parameters.language_code}</li>
                  <li>üíª –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {selectedLog.parameters.device}</li>
                  <li>üìä –ì–ª—É–±–∏–Ω–∞: –¢–û–ü-{selectedLog.parameters.depth}</li>
                </ul>
              </div>
              <div className="col-md-6">
                <h6>‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:</h6>
                <ul className="list-unstyled">
                  <li>
                    {selectedLog.analysis_result.has_ads ? 
                      <FaCheckCircle className="text-success" /> : 
                      <FaTimesCircle className="text-danger" />
                    } –†–µ–∫–ª–∞–º–∞
                  </li>
                  <li>
                    {selectedLog.analysis_result.has_maps ? 
                      <FaCheckCircle className="text-success" /> : 
                      <FaTimesCircle className="text-danger" />
                    } Google Maps
                  </li>
                  <li>
                    {selectedLog.analysis_result.has_our_site ? 
                      <FaCheckCircle className="text-success" /> : 
                      <FaTimesCircle className="text-danger" />
                    } –ù–∞—à —Å–∞–π—Ç
                  </li>
                  <li>
                    {selectedLog.analysis_result.has_school_sites ? 
                      <FaCheckCircle className="text-success" /> : 
                      <FaTimesCircle className="text-danger" />
                    } –°–∞–π—Ç—ã —à–∫–æ–ª ({selectedLog.analysis_result.school_percentage.toFixed(1)}%)
                  </li>
                  <li>
                    <strong>–ò–Ω—Ç–µ–Ω—Ç:</strong> 
                    <Badge bg={selectedLog.analysis_result.intent_type === '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π' ? 'success' : 'info'} className="ms-2">
                      {selectedLog.analysis_result.intent_type}
                    </Badge>
                  </li>
                </ul>
              </div>
            </div>

            <hr />

            <h6>üåê –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞:</h6>
            <Table size="sm" striped hover>
              <thead>
                <tr>
                  <th width="50">#</th>
                  <th width="200">–î–æ–º–µ–Ω</th>
                  <th>–ó–∞–≥–æ–ª–æ–≤–æ–∫</th>
                </tr>
              </thead>
              <tbody>
                {selectedLog.organic_results && selectedLog.organic_results.map((item, idx) => (
                  <tr key={idx}>
                    <td>{item.position}</td>
                    <td>
                      <strong>{item.domain}</strong>
                      {item.domain === 'montessori.ua' && 
                        <Badge bg="success" className="ms-2">–ù–∞—à —Å–∞–π—Ç</Badge>
                      }
                    </td>
                    <td>
                      <small>{item.title}</small>
                    </td>
                  </tr>
                ))}
              </tbody>
            </Table>

            {selectedLog.paid_results && selectedLog.paid_results.length > 0 && (
              <>
                <hr />
                <h6>üí∞ –†–µ–∫–ª–∞–º–Ω—ã–µ –±–ª–æ–∫–∏:</h6>
                <Table size="sm" striped>
                  <thead>
                    <tr>
                      <th>#</th>
                      <th>–î–æ–º–µ–Ω</th>
                      <th>–ó–∞–≥–æ–ª–æ–≤–æ–∫</th>
                    </tr>
                  </thead>
                  <tbody>
                    {selectedLog.paid_results.map((item, idx) => (
                      <tr key={idx}>
                        <td>{item.position}</td>
                        <td>{item.domain}</td>
                        <td><small>{item.title}</small></td>
                      </tr>
                    ))}
                  </tbody>
                </Table>
              </>
            )}

            <div className="mt-3 text-end">
              <small className="text-muted">
                üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: ${selectedLog.cost.toFixed(4)}
              </small>
            </div>
          </Card.Body>
        </Card>
      </div>
    );
  };

  return (
    <Modal show={show} onHide={onHide} size="xl">
      <Modal.Header closeButton className="bg-light">
        <Modal.Title>
          <FaSearch className="me-2" />
          SERP –ê–Ω–∞–ª–∏–∑ - –ò—Å—Ç–æ—Ä–∏—è
        </Modal.Title>
      </Modal.Header>
      <Modal.Body style={{ maxHeight: '70vh', overflowY: 'auto' }}>
        {loading ? (
          <div className="text-center py-5">
            <div className="spinner-border text-primary" role="status">
              <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
            </div>
            <p className="mt-3">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
          </div>
        ) : error ? (
          <Alert variant="danger">
            <strong>–û—à–∏–±–∫–∞:</strong> {error}
          </Alert>
        ) : (
          <Tabs activeKey={activeTab} onSelect={setActiveTab} className="mb-3">
            <Tab eventKey="list" title={`üìã –°–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤ (${logs.length})`}>
              {logs.length === 0 ? (
                <Alert variant="info">
                  <strong>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö SERP –∞–Ω–∞–ª–∏–∑–∞</strong>
                  <br />
                  –í—ã–ø–æ–ª–Ω–∏—Ç–µ SERP –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–¥–µ—Å—å.
                </Alert>
              ) : (
                renderLogsTable()
              )}
            </Tab>
            <Tab eventKey="details" title="üìä –î–µ—Ç–∞–ª–∏">
              {selectedLog ? renderLogDetails() : (
                <Alert variant="info">
                  –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
                </Alert>
              )}
            </Tab>
          </Tabs>
        )}
      </Modal.Body>
      <Modal.Footer>
        <Button variant="primary" onClick={loadLogs} disabled={loading}>
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å
        </Button>
        <Button variant="secondary" onClick={onHide}>
          –ó–∞–∫—Ä—ã—Ç—å
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

export default SerpLogsModal;
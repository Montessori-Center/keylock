#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –ë–î: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è is_new –≤ —Ç–∞–±–ª–∏—Ü—É competitor_schools
–ó–∞–ø—É—Å–∫–∞—Ç—å –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: python migrate_competitors_is_new.py
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent / 'backend'))

try:
    from config import Config
    import pymysql
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª backend/config.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    sys.exit(1)


def get_db_connection():
    """–°–æ–∑–¥–∞—ë—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏—Å–ø–æ–ª—å–∑—É—è Config"""
    return pymysql.connect(
        host=Config.DB_HOST,
        port=Config.DB_PORT,
        user=Config.DB_USER,
        password=Config.DB_PASSWORD,
        database=Config.DB_NAME,
        cursorclass=pymysql.cursors.DictCursor
    )


def check_column_exists(cursor, table_name, column_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    cursor.execute(f"""
        SELECT COUNT(*) as count
        FROM information_schema.COLUMNS
        WHERE TABLE_SCHEMA = DATABASE()
        AND TABLE_NAME = '{table_name}'
        AND COLUMN_NAME = '{column_name}'
    """)
    result = cursor.fetchone()
    return result['count'] > 0


def check_index_exists(cursor, table_name, index_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞"""
    cursor.execute(f"""
        SELECT COUNT(*) as count
        FROM information_schema.STATISTICS
        WHERE TABLE_SCHEMA = DATABASE()
        AND TABLE_NAME = '{table_name}'
        AND INDEX_NAME = '{index_name}'
    """)
    result = cursor.fetchone()
    return result['count'] > 0


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    
    print("=" * 70)
    print("üîß –ú–ò–ì–†–ê–¶–ò–Ø –ë–î: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è is_new –≤ —Ç–∞–±–ª–∏—Ü—É competitor_schools")
    print("=" * 70)
    
    connection = None
    
    try:
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        print(f"\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
        print(f"   Host: {Config.DB_HOST}")
        print(f"   Port: {Config.DB_PORT}")
        print(f"   Database: {Config.DB_NAME}")
        print(f"   User: {Config.DB_USER}")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        print("\nüì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        connection = get_db_connection()
        cursor = connection.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–π –ë–î
        cursor.execute("SELECT DATABASE() as db_name")
        db_info = cursor.fetchone()
        print(f"   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ë–î: {db_info['db_name']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é MySQL
        cursor.execute("SELECT VERSION() as version")
        version_info = cursor.fetchone()
        print(f"   ‚úÖ MySQL –≤–µ—Ä—Å–∏—è: {version_info['version']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã competitor_schools
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã competitor_schools...")
        cursor.execute("""
            SELECT COUNT(*) as count
            FROM information_schema.TABLES
            WHERE TABLE_SCHEMA = DATABASE()
            AND TABLE_NAME = 'competitor_schools'
        """)
        table_exists = cursor.fetchone()['count'] > 0
        
        if not table_exists:
            print("   ‚ùå –û–®–ò–ë–ö–ê: –¢–∞–±–ª–∏—Ü–∞ competitor_schools –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            print("   –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ create_new_tables.py")
            return False
        
        print("   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ competitor_schools –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        cursor.execute("""
            SELECT COLUMN_NAME, COLUMN_TYPE, IS_NULLABLE, COLUMN_DEFAULT, COLUMN_COMMENT
            FROM information_schema.COLUMNS
            WHERE TABLE_SCHEMA = DATABASE()
            AND TABLE_NAME = 'competitor_schools'
            ORDER BY ORDINAL_POSITION
        """)
        current_columns = cursor.fetchall()
        
        print(f"\nüìã –¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ competitor_schools ({len(current_columns)}):")
        for col in current_columns:
            print(f"   - {col['COLUMN_NAME']} ({col['COLUMN_TYPE']})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è is_new
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è is_new...")
        is_new_exists = check_column_exists(cursor, 'competitor_schools', 'is_new')
        
        if is_new_exists:
            print("   ‚ö†Ô∏è  –ü–æ–ª–µ is_new —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            print("   –ú–∏–≥—Ä–∞—Ü–∏—è —É–∂–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ä–∞–Ω–µ–µ")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cursor.execute("SELECT COUNT(*) as count FROM competitor_schools WHERE is_new = 1")
            pending_count = cursor.fetchone()['count']
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —à–∫–æ–ª (is_new = 1): {pending_count}")
            
            return True
        
        print("   ‚úÖ –ü–æ–ª–µ is_new –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é...")
        
        # ===== –ú–ò–ì–†–ê–¶–ò–Ø 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è is_new =====
        print("\nüî® –®–∞–≥ 1/4: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è is_new...")
        cursor.execute("""
            ALTER TABLE competitor_schools 
            ADD COLUMN is_new TINYINT(1) NOT NULL DEFAULT 0 
            COMMENT '–§–ª–∞–≥ –Ω–æ–≤–æ–π –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π —à–∫–æ–ª—ã (1 = –Ω–æ–≤–∞—è, 0 = –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞)'
            AFTER notes
        """)
        print("   ‚úÖ –ü–æ–ª–µ is_new —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        
        # ===== –ú–ò–ì–†–ê–¶–ò–Ø 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é =====
        print("\nüî® –®–∞–≥ 2/4: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
        cursor.execute("UPDATE competitor_schools SET is_new = 0 WHERE is_new IS NULL")
        affected = cursor.rowcount
        print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {affected}")
        
        # ===== –ú–ò–ì–†–ê–¶–ò–Ø 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ =====
        print("\nüî® –®–∞–≥ 3/4: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
        
        index_exists = check_index_exists(cursor, 'competitor_schools', 'idx_is_new')
        
        if not index_exists:
            cursor.execute("CREATE INDEX idx_is_new ON competitor_schools(is_new)")
            print("   ‚úÖ –ò–Ω–¥–µ–∫—Å idx_is_new —Å–æ–∑–¥–∞–Ω")
        else:
            print("   ‚ÑπÔ∏è  –ò–Ω–¥–µ–∫—Å idx_is_new —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # ===== –ú–ò–ì–†–ê–¶–ò–Ø 4: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ =====
        print("\nüî® –®–∞–≥ 4/4: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏...")
        
        composite_index_exists = check_index_exists(cursor, 'competitor_schools', 'idx_is_new_org_type')
        
        if not composite_index_exists:
            cursor.execute("CREATE INDEX idx_is_new_org_type ON competitor_schools(is_new, org_type)")
            print("   ‚úÖ –ò–Ω–¥–µ–∫—Å idx_is_new_org_type —Å–æ–∑–¥–∞–Ω")
        else:
            print("   ‚ÑπÔ∏è  –ò–Ω–¥–µ–∫—Å idx_is_new_org_type —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        connection.commit()
        print("\nüíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏...")
        cursor.execute("""
            SELECT COLUMN_NAME, COLUMN_TYPE, IS_NULLABLE, COLUMN_DEFAULT, COLUMN_COMMENT
            FROM information_schema.COLUMNS
            WHERE TABLE_SCHEMA = DATABASE()
            AND TABLE_NAME = 'competitor_schools'
            AND COLUMN_NAME = 'is_new'
        """)
        new_column = cursor.fetchone()
        
        if new_column:
            print("   ‚úÖ –ü–æ–ª–µ is_new —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ:")
            print(f"      –¢–∏–ø: {new_column['COLUMN_TYPE']}")
            print(f"      NULL: {new_column['IS_NULLABLE']}")
            print(f"      –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {new_column['COLUMN_DEFAULT']}")
            print(f"      –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {new_column['COLUMN_COMMENT']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        print("\nüìë –ò–Ω–¥–µ–∫—Å—ã —Ç–∞–±–ª–∏—Ü—ã competitor_schools:")
        cursor.execute("""
            SELECT DISTINCT INDEX_NAME, NON_UNIQUE, GROUP_CONCAT(COLUMN_NAME ORDER BY SEQ_IN_INDEX) as COLUMNS
            FROM information_schema.STATISTICS
            WHERE TABLE_SCHEMA = DATABASE()
            AND TABLE_NAME = 'competitor_schools'
            GROUP BY INDEX_NAME, NON_UNIQUE
            ORDER BY INDEX_NAME
        """)
        indexes = cursor.fetchall()
        for idx in indexes:
            index_type = "UNIQUE" if idx['NON_UNIQUE'] == 0 else "INDEX"
            print(f"   - {idx['INDEX_NAME']} ({index_type}): {idx['COLUMNS']}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(*) as count FROM competitor_schools")
        total = cursor.fetchone()['count']
        
        cursor.execute("SELECT COUNT(*) as count FROM competitor_schools WHERE is_new = 1")
        pending = cursor.fetchone()['count']
        
        cursor.execute("SELECT COUNT(*) as count FROM competitor_schools WHERE is_new = 0")
        processed = cursor.fetchone()['count']
        
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö (is_new = 0): {processed}")
        print(f"   –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö (is_new = 1): {pending}")
        
        print("\n" + "=" * 70)
        print("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("=" * 70)
        
        print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –û–±–Ω–æ–≤–∏—Ç–µ backend API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º –ø–æ–ª–µ–º")
        print("   2. –û–±–Ω–æ–≤–∏—Ç–µ frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
        print("   3. –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∫–æ–ª –∏–∑ SERP —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ is_new = 1")
        print("   4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Flask —Å–µ—Ä–≤–µ—Ä")
        
        return True
        
    except pymysql.err.OperationalError as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:")
        print(f"   {e}")
        print("\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   1. MySQL —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        print("   2. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ backend/config.py –∏–ª–∏ .env")
        print("   3. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        print("   4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
        return False
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:")
        print(f"   {type(e).__name__}: {e}")
        
        if connection:
            print("\nüîÑ –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
            connection.rollback()
            print("   ‚úÖ –û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        import traceback
        print("\nüìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        traceback.print_exc()
        
        return False
        
    finally:
        if connection:
            cursor.close()
            connection.close()
            print("\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")


if __name__ == '__main__':
    try:
        success = main()
        
        if success:
            print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            sys.exit(0)
        else:
            print("\n‚ö†Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
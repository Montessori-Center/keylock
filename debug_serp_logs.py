#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç DataForSEO API
–ü–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç API –∏ –ø–æ—á–µ–º—É —Ä–µ–∫–ª–∞–º–∞/–∫–∞—Ä—Ç—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è
"""

import sys
import os
import json
from collections import Counter

sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from services.dataforseo_client import get_dataforseo_client
from config import Config

def analyze_serp_response():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π SERP –æ—Ç–≤–µ—Ç"""
    
    print("=" * 80)
    print("üîç –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–û–ì–û SERP –û–¢–í–ï–¢–ê –û–¢ DataForSEO")
    print("=" * 80)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = get_dataforseo_client()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_cases = [
            {
                'keyword': '—É—Ä–æ–∫–∏ —Ñ–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ –∫–∏–µ–≤',
                'description': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å'
            },
            {
                'keyword': '–∫—É–ø–∏—Ç—å –ø–∏–∞–Ω–∏–Ω–æ –∫–∏–µ–≤',
                'description': '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∫–ª–∞–º–∞)'
            },
            {
                'keyword': '—Ä–µ—Å—Ç–æ—Ä–∞–Ω –∫–∏–µ–≤ —Ü–µ–Ω—Ç—Ä',
                'description': '–õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–∞—Ä—Ç—ã)'
            }
        ]
        
        for test in test_cases:
            keyword = test['keyword']
            
            print(f"\n{'=' * 80}")
            print(f"üîé –¢–µ—Å—Ç–∏—Ä—É–µ–º: {keyword}")
            print(f"   ({test['description']})")
            print(f"{'=' * 80}\n")
            
            # –î–µ–ª–∞–µ–º SERP –∑–∞–ø—Ä–æ—Å
            response = client.get_serp(
                keyword=keyword,
                location_code=2804,  # –ö–∏–µ–≤
                language_code='ru',
                device='desktop',
                depth=30
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            if not response.get('tasks'):
                print("‚ùå –ù–µ—Ç 'tasks' –≤ –æ—Ç–≤–µ—Ç–µ")
                continue
            
            task = response['tasks'][0]
            
            if task.get('status_code') != 20000:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {task.get('status_message')}")
                continue
            
            if not task.get('result'):
                print("‚ùå –ù–µ—Ç 'result' –≤ task")
                continue
            
            result = task['result'][0]
            items = result.get('items', [])
            
            if not items:
                print("‚ö†Ô∏è –ù–µ—Ç 'items' –≤ result")
                continue
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items)}")
            print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${task.get('cost', 0)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            print(f"\nüìä –ú–ï–¢–ê–î–ê–ù–ù–´–ï:")
            print(f"   - items_count: {result.get('items_count', 0)}")
            print(f"   - se_results_count: {result.get('se_results_count', 0)}")
            print(f"   - item_types: {result.get('item_types', [])}")
            
            # –°—á–∏—Ç–∞–µ–º —Ç–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            type_counter = Counter()
            
            print(f"\n{'=' * 80}")
            print("üìã –î–ï–¢–ê–õ–¨–ù–´–ô –†–ê–ó–ë–û–† –ö–ê–ñ–î–û–ì–û –≠–õ–ï–ú–ï–ù–¢–ê:")
            print(f"{'=' * 80}\n")
            
            for idx, item in enumerate(items, 1):
                item_type = item.get('type', 'UNKNOWN')
                rank_absolute = item.get('rank_absolute', 0)
                rank_group = item.get('rank_group', 0)
                
                type_counter[item_type] += 1
                
                # –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
                print(f"#{idx:2d} | type='{item_type:20s}' | rank_absolute={rank_absolute:3d} | rank_group={rank_group:3d}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                if 'domain' in item:
                    print(f"     domain: {item.get('domain', 'N/A')}")
                if 'title' in item:
                    title = item.get('title', '')
                    print(f"     title: {title[:70] if title else 'N/A'}")
                if 'url' in item:
                    url = item.get('url', '')
                    print(f"     url: {url[:80] if url else 'N/A'}")
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è local_pack
                if item_type == 'local_pack':
                    local_items = item.get('items', [])
                    if local_items:
                        print(f"     üìç –ú–µ—Å—Ç –≤ local_pack: {len(local_items)}")
                        for i, place in enumerate(local_items[:3], 1):
                            print(f"        {i}. {place.get('title', 'No title')}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –∫–ª—é—á–∏ –≤ item –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                print(f"     üîë –í—Å–µ –∫–ª—é—á–∏ –≤ item: {list(item.keys())}")
                print()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print(f"\n{'=' * 80}")
            print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ò–ü–û–í:")
            print(f"{'=' * 80}\n")
            
            for item_type, count in type_counter.most_common():
                print(f"   {item_type:20s}: {count:2d} —à—Ç.")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤
            print(f"\n{'=' * 80}")
            print("üéØ –ê–ù–ê–õ–ò–ó –†–ï–ö–õ–ê–ú–´ –ò –ö–ê–†–¢:")
            print(f"{'=' * 80}\n")
            
            # –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è —Ä–µ–∫–ª–∞–º—ã
            ad_variants = ['paid', 'google_ads', 'shopping', 'ads', 'google_flights', 'google_hotels']
            found_ads = [t for t in type_counter.keys() if t in ad_variants]
            
            # –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –∫–∞—Ä—Ç
            map_variants = ['local_pack', 'maps', 'map', 'google_maps']
            found_maps = [t for t in type_counter.keys() if t in map_variants]
            
            print(f"üí∞ –†–ï–ö–õ–ê–ú–ê:")
            if found_ads:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ —Ç–∏–ø–æ–≤: {found_ads}")
                for ad_type in found_ads:
                    print(f"      - {ad_type}: {type_counter[ad_type]} —à—Ç.")
            else:
                print(f"   ‚ùå –†–µ–∫–ª–∞–º–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞")
                print(f"   ‚ÑπÔ∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                print(f"      1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å (—Ä–µ–∫–ª–∞–º–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
                print(f"      2. –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è (–Ω–µ—Ç —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π –≤ –¥–∞–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ)")
                print(f"      3. API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤")
            
            print(f"\nüó∫Ô∏è –ö–ê–†–¢–´ GOOGLE:")
            if found_maps:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–∞—Ä—Ç—ã —Ç–∏–ø–æ–≤: {found_maps}")
                for map_type in found_maps:
                    print(f"      - {map_type}: {type_counter[map_type]} —à—Ç.")
            else:
                print(f"   ‚ùå –ö–∞—Ä—Ç—ã –ù–ï –Ω–∞–π–¥–µ–Ω—ã")
                print(f"   ‚ÑπÔ∏è –û–±—ã—á–Ω–æ –∫–∞—Ä—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–æ–¥–∞
            print(f"\n{'=' * 80}")
            print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ö–û–î–ê:")
            print(f"{'=' * 80}\n")
            
            all_types = list(type_counter.keys())
            
            # –î–ª—è —Ä–µ–∫–ª–∞–º—ã
            actual_ad_types = [t for t in all_types if t in ad_variants]
            if actual_ad_types:
                print(f"‚úÖ –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –†–ï–ö–õ–ê–ú–´ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
                print(f"   if item_type in {actual_ad_types}:")
                print(f"       has_ads = True\n")
            else:
                print(f"‚ö†Ô∏è –†–µ–∫–ª–∞–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö\n")
            
            # –î–ª—è –∫–∞—Ä—Ç
            actual_map_types = [t for t in all_types if t in map_variants]
            if actual_map_types:
                print(f"‚úÖ –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ö–ê–†–¢ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
                print(f"   elif item_type in {actual_map_types}:")
                print(f"       has_google_maps = True\n")
            else:
                print(f"‚ö†Ô∏è –ö–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö\n")
            
            # –î–ª—è –æ—Ä–≥–∞–Ω–∏–∫–∏
            if 'organic' in all_types:
                print(f"‚úÖ –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å—Ç—å (—Ç–∏–ø 'organic')")
                print(f"   –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {type_counter['organic']} —à—Ç.\n")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ñ–∞–π–ª –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            filename = f"serp_response_{keyword.replace(' ', '_')}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(response, f, ensure_ascii=False, indent=2)
            print(f"üíæ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {filename}")
            print()
        
        print("\n" + "=" * 80)
        print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–Å–ù")
        print("=" * 80)
        print("\nüìå –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç API")
        print("   2. –û–±–Ω–æ–≤–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –≤ parse_serp_response —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Ç–∏–ø–∞–º")
        print("   3. –ü–æ–ª–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã API —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSON —Ñ–∞–π–ª—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è")
        print()
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    try:
        analyze_serp_response()
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
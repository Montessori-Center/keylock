#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã serp_logs
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–ª—è JSON-–ø–æ–ª–µ–π
"""

import sys
import os
import pymysql

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from config import Config

def get_db_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    return pymysql.connect(
        host=Config.DB_HOST,
        user=Config.DB_USER,
        password=Config.DB_PASSWORD,
        database=Config.DB_NAME,
        port=Config.DB_PORT,
        cursorclass=pymysql.cursors.DictCursor,
        charset='utf8mb4'
    )

def fix_serp_logs_table():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã serp_logs"""
    
    print("=" * 80)
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ serp_logs")
    print("=" * 80)
    
    connection = get_db_connection()
    cursor = connection.cursor()
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã...")
        cursor.execute("DESCRIBE serp_logs")
        columns = cursor.fetchall()
        
        print("\nüìã –¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:")
        for col in columns:
            print(f"   - {col['Field']}: {col['Type']} (Null: {col['Null']})")
        
        # 2. –ò–∑–º–µ–Ω—è–µ–º —Ç–∏–ø—ã JSON-–ø–æ–ª–µ–π –Ω–∞ LONGTEXT
        print("\n2Ô∏è‚É£ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ JSON-–ø–æ–ª–µ–π –Ω–∞ LONGTEXT...")
        
        changes = [
            ('analysis_result', 'LONGTEXT'),
            ('parsed_items', 'LONGTEXT'),
            ('raw_response', 'LONGTEXT')
        ]
        
        for column_name, column_type in changes:
            try:
                alter_query = f"""
                    ALTER TABLE serp_logs 
                    MODIFY COLUMN {column_name} {column_type} 
                    CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL
                """
                cursor.execute(alter_query)
                print(f"   ‚úÖ {column_name} -> {column_type}")
            except pymysql.err.OperationalError as e:
                if "Duplicate column name" in str(e) or "Unknown column" in str(e):
                    print(f"   ‚ö†Ô∏è {column_name}: –∫–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                else:
                    raise
        
        connection.commit()
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
        cursor.execute("DESCRIBE serp_logs")
        columns = cursor.fetchall()
        
        print("\nüìã –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:")
        for col in columns:
            if col['Field'] in ['analysis_result', 'parsed_items', 'raw_response']:
                print(f"   ‚úÖ {col['Field']}: {col['Type']} (Null: {col['Null']})")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        cursor.execute("""
            SELECT 
                COUNT(*) as total,
                SUM(CASE WHEN analysis_result IS NULL OR analysis_result = '' THEN 1 ELSE 0 END) as empty_analysis,
                SUM(CASE WHEN parsed_items IS NULL OR parsed_items = '' THEN 1 ELSE 0 END) as empty_parsed
            FROM serp_logs
        """)
        stats = cursor.fetchone()
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats['total']}")
        print(f"   –° –ø—É—Å—Ç—ã–º analysis_result: {stats['empty_analysis']}")
        print(f"   –° –ø—É—Å—Ç—ã–º parsed_items: {stats['empty_parsed']}")
        
        # 5. –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        if stats['empty_analysis'] > 0 or stats['empty_parsed'] > 0:
            print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç—ã–º–∏ JSON-–ø–æ–ª—è–º–∏")
            response = input("‚ùì –£–¥–∞–ª–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏? (yes/no): ").strip().lower()
            
            if response == 'yes':
                cursor.execute("""
                    DELETE FROM serp_logs 
                    WHERE analysis_result IS NULL 
                       OR analysis_result = ''
                       OR parsed_items IS NULL
                       OR parsed_items = ''
                """)
                deleted = cursor.rowcount
                connection.commit()
                print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {deleted}")
            else:
                print("   ‚ÑπÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        
        # 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π...")
        cursor.execute("""
            SELECT 
                id,
                keyword_text,
                created_at,
                CHAR_LENGTH(parsed_items) as parsed_len,
                CHAR_LENGTH(analysis_result) as analysis_len,
                CASE 
                    WHEN analysis_result IS NULL THEN '‚ùå NULL'
                    WHEN analysis_result = '' THEN '‚ö†Ô∏è EMPTY'
                    ELSE '‚úÖ OK'
                END as status
            FROM serp_logs 
            ORDER BY created_at DESC 
            LIMIT 5
        """)
        records = cursor.fetchall()
        
        print("\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π:")
        for rec in records:
            print(f"   ID {rec['id']}: {rec['keyword_text']}")
            print(f"      –î–∞—Ç–∞: {rec['created_at']}")
            print(f"      parsed_items: {rec['parsed_len'] or 0} –±–∞–π—Ç")
            print(f"      analysis_result: {rec['analysis_len'] or 0} –±–∞–π—Ç")
            print(f"      –°—Ç–∞—Ç—É—Å: {rec['status']}")
            print()
        
        print("=" * 80)
        print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û")
        print("=" * 80)
        print("\nüìå –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ parse_serp_response –≤ backend/api/dataforseo.py")
        print("   2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ backend-—Å–µ—Ä–≤–µ—Ä")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ SERP –∞–Ω–∞–ª–∏–∑ –∑–∞–Ω–æ–≤–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
        print("   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ debug_serp_logs.py")
        print()
        
    except Exception as e:
        connection.rollback()
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏: {str(e)}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        cursor.close()
        connection.close()
    
    return True

if __name__ == "__main__":
    try:
        success = fix_serp_logs_table()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
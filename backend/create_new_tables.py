#!/usr/bin/env python3
# backend/database/migrate_serp_positions.py
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π SERP –ø–æ–∑–∏—Ü–∏–π
–ó–∞–ø—É—Å–∫: python3 migrate_serp_positions.py
"""

import pymysql
import sys
from config import Config

def log(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å flush"""
    print(message)
    sys.stdout.flush()

def run_migration():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –ë–î"""
    connection = None
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        log("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
        connection = pymysql.connect(
            host=Config.DB_HOST,
            port=Config.DB_PORT,
            user=Config.DB_USER,
            password=Config.DB_PASSWORD,
            database=Config.DB_NAME,
            cursorclass=pymysql.cursors.DictCursor
        )
        
        cursor = connection.cursor()
        log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ë–î")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ –ø–æ–ª—è
        log("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π...")
        cursor.execute("""
            SELECT COLUMN_NAME 
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = %s 
            AND TABLE_NAME = 'keywords'
            AND COLUMN_NAME IN ('our_organic_position', 'our_actual_position', 'last_serp_check')
        """, (Config.DB_NAME,))
        
        existing_columns = [row['COLUMN_NAME'] for row in cursor.fetchall()]
        log(f"   –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: {existing_columns if existing_columns else '–Ω–µ—Ç'}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É keywords
        log("\nüìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É keywords...")
        
        if 'our_organic_position' not in existing_columns:
            log("   ‚ûï –î–æ–±–∞–≤–ª—è–µ–º our_organic_position...")
            cursor.execute("""
                ALTER TABLE keywords
                ADD COLUMN our_organic_position INT DEFAULT NULL 
                COMMENT '–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞ (—Å—Ä–µ–¥–∏ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)'
            """)
            log("   ‚úÖ our_organic_position –¥–æ–±–∞–≤–ª–µ–Ω")
        else:
            log("   ‚è≠Ô∏è  our_organic_position —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        if 'our_actual_position' not in existing_columns:
            log("   ‚ûï –î–æ–±–∞–≤–ª—è–µ–º our_actual_position...")
            cursor.execute("""
                ALTER TABLE keywords
                ADD COLUMN our_actual_position INT DEFAULT NULL 
                COMMENT '–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (—Å —É—á–µ—Ç–æ–º —Ä–µ–∫–ª–∞–º—ã –∏ –∫–∞—Ä—Ç)'
            """)
            log("   ‚úÖ our_actual_position –¥–æ–±–∞–≤–ª–µ–Ω")
        else:
            log("   ‚è≠Ô∏è  our_actual_position —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        if 'last_serp_check' not in existing_columns:
            log("   ‚ûï –î–æ–±–∞–≤–ª—è–µ–º last_serp_check...")
            cursor.execute("""
                ALTER TABLE keywords
                ADD COLUMN last_serp_check DATETIME DEFAULT NULL 
                COMMENT '–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π SERP –ø—Ä–æ–≤–µ—Ä–∫–∏'
            """)
            log("   ‚úÖ last_serp_check –¥–æ–±–∞–≤–ª–µ–Ω")
        else:
            log("   ‚è≠Ô∏è  last_serp_check —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ analysis_result –≤ serp_logs
        log("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã serp_logs...")
        cursor.execute("""
            SELECT COLUMN_NAME 
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = %s 
            AND TABLE_NAME = 'serp_logs'
            AND COLUMN_NAME = 'analysis_result'
        """, (Config.DB_NAME,))
        
        has_analysis_result = cursor.fetchone()
        
        if not has_analysis_result:
            log("   ‚ûï –î–æ–±–∞–≤–ª—è–µ–º analysis_result –≤ serp_logs...")
            cursor.execute("""
                ALTER TABLE serp_logs
                ADD COLUMN analysis_result JSON DEFAULT NULL 
                COMMENT '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ'
            """)
            log("   ‚úÖ analysis_result –¥–æ–±–∞–≤–ª–µ–Ω")
        else:
            log("   ‚è≠Ô∏è  analysis_result —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        log("\nüìá –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")
        
        try:
            cursor.execute("""
                CREATE INDEX idx_our_organic_position ON keywords(our_organic_position)
            """)
            log("   ‚úÖ –ò–Ω–¥–µ–∫—Å idx_our_organic_position —Å–æ–∑–¥–∞–Ω")
        except pymysql.err.OperationalError as e:
            if "Duplicate key name" in str(e):
                log("   ‚è≠Ô∏è  –ò–Ω–¥–µ–∫—Å idx_our_organic_position —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                raise
        
        try:
            cursor.execute("""
                CREATE INDEX idx_last_serp_check ON keywords(last_serp_check)
            """)
            log("   ‚úÖ –ò–Ω–¥–µ–∫—Å idx_last_serp_check —Å–æ–∑–¥–∞–Ω")
        except pymysql.err.OperationalError as e:
            if "Duplicate key name" in str(e):
                log("   ‚è≠Ô∏è  –ò–Ω–¥–µ–∫—Å idx_last_serp_check —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                raise
        
        try:
            cursor.execute("""
                CREATE INDEX idx_keyword_id ON serp_logs(keyword_id)
            """)
            log("   ‚úÖ –ò–Ω–¥–µ–∫—Å idx_keyword_id —Å–æ–∑–¥–∞–Ω")
        except pymysql.err.OperationalError as e:
            if "Duplicate key name" in str(e):
                log("   ‚è≠Ô∏è  –ò–Ω–¥–µ–∫—Å idx_keyword_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                raise
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        connection.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        log("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã keywords...")
        cursor.execute("""
            SELECT COLUMN_NAME, COLUMN_TYPE, COLUMN_COMMENT
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = %s 
            AND TABLE_NAME = 'keywords'
            AND COLUMN_NAME IN ('our_organic_position', 'our_actual_position', 'last_serp_check')
            ORDER BY COLUMN_NAME
        """, (Config.DB_NAME,))
        
        columns_info = cursor.fetchall()
        for col in columns_info:
            log(f"   ‚úÖ {col['COLUMN_NAME']}: {col['COLUMN_TYPE']} - {col['COLUMN_COMMENT']}")
        
        cursor.close()
        
        log("\n" + "="*50)
        log("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        log("="*50)
        
        return True
        
    except Exception as e:
        log(f"\n‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {str(e)}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        if connection:
            connection.close()
            log("\nüîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ")


if __name__ == '__main__':
    log("="*50)
    log("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ SERP –ø–æ–∑–∏—Ü–∏–π")
    log("="*50)
    
    success = run_migration()
    
    if success:
        sys.exit(0)
    else:
        sys.exit(1)
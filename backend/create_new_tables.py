#!/usr/bin/env python3
# backend/migrations/check_serp_logs.py
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã serp_logs
"""

import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import Config
import pymysql

def check_and_fix_serp_logs():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã serp_logs"""
    
    print("=" * 60)
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´ serp_logs")
    print("=" * 60)
    
    connection = None
    try:
        connection = pymysql.connect(
            host=Config.DB_HOST,
            port=Config.DB_PORT,
            user=Config.DB_USER,
            password=Config.DB_PASSWORD,
            database=Config.DB_NAME,
            cursorclass=pymysql.cursors.DictCursor
        )
        
        cursor = connection.cursor()
        
        print(f"\n‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {Config.DB_NAME}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            SELECT COUNT(*) as count
            FROM INFORMATION_SCHEMA.TABLES 
            WHERE TABLE_SCHEMA = %s 
            AND TABLE_NAME = 'serp_logs'
        """, (Config.DB_NAME,))
        
        table_exists = cursor.fetchone()['count'] > 0
        
        if not table_exists:
            print("\n‚ùå –¢–∞–±–ª–∏—Ü–∞ serp_logs –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢!")
            print("–°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É...")
            
            cursor.execute("""
                CREATE TABLE serp_logs (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    keyword_id INT NOT NULL,
                    keyword_text VARCHAR(500),
                    raw_response LONGTEXT,
                    parsed_items LONGTEXT,
                    analysis_result TEXT,
                    cost DECIMAL(10, 4) DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    INDEX idx_keyword_id (keyword_id),
                    INDEX idx_created_at (created_at)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
            """)
            
            connection.commit()
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ serp_logs —Å–æ–∑–¥–∞–Ω–∞")
        else:
            print("\n‚úÖ –¢–∞–±–ª–∏—Ü–∞ serp_logs —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            SELECT COLUMN_NAME, COLUMN_TYPE, IS_NULLABLE, COLUMN_DEFAULT
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = %s 
            AND TABLE_NAME = 'serp_logs'
            ORDER BY ORDINAL_POSITION
        """, (Config.DB_NAME,))
        
        columns = cursor.fetchall()
        
        print("\nüìã –¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:")
        existing_columns = []
        for col in columns:
            existing_columns.append(col['COLUMN_NAME'])
            print(f"   - {col['COLUMN_NAME']}: {col['COLUMN_TYPE']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        required_columns = {
            'id': 'INT AUTO_INCREMENT PRIMARY KEY',
            'keyword_id': 'INT NOT NULL',
            'keyword_text': 'VARCHAR(500)',
            'raw_response': 'LONGTEXT',
            'parsed_items': 'LONGTEXT',
            'analysis_result': 'TEXT',
            'cost': 'DECIMAL(10, 4) DEFAULT 0',
            'created_at': 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP'
        }
        
        missing_columns = []
        for col_name in required_columns:
            if col_name not in existing_columns:
                missing_columns.append(col_name)
        
        if missing_columns:
            print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}")
            print("–î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏...")
            
            for col_name in missing_columns:
                if col_name == 'id':
                    continue  # ID –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
                
                col_type = required_columns[col_name]
                print(f"   ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {col_name}...")
                
                try:
                    cursor.execute(f"ALTER TABLE serp_logs ADD COLUMN {col_name} {col_type}")
                    print(f"      ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ {col_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                except Exception as e:
                    print(f"      ‚ö†Ô∏è  –û—à–∏–±–∫–∞: {str(e)}")
            
            connection.commit()
            print("\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            print("\n‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cursor.execute("SELECT COUNT(*) as count FROM serp_logs")
        count = cursor.fetchone()['count']
        print(f"\nüìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ serp_logs: {count}")
        
        if count > 0:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏
            cursor.execute("""
                SELECT id, keyword_id, keyword_text, 
                       CHAR_LENGTH(analysis_result) as analysis_len,
                       created_at
                FROM serp_logs 
                ORDER BY created_at DESC 
                LIMIT 3
            """)
            recent = cursor.fetchall()
            
            print("\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:")
            for row in recent:
                print(f"   ID: {row['id']}, "
                      f"Keyword: {row['keyword_text']}, "
                      f"Analysis: {row['analysis_len']} bytes, "
                      f"Date: {row['created_at']}")
        
        cursor.close()
        
        print("\n" + "=" * 60)
        print("‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        print("=" * 60)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        if connection:
            connection.close()

if __name__ == "__main__":
    try:
        success = check_and_fix_serp_logs()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        sys.exit(1)
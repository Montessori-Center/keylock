#!/usr/bin/env python3
# backend/migrations/add_position_fields.py
"""
–ú–∏–≥—Ä–∞—Ü–∏—è: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —Å–∞–π—Ç–∞ –≤ SERP
- our_organic_position: –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–∑–∏—Ü–∏—è (—Å—Ä–µ–¥–∏ –æ—Ä–≥–∞–Ω–∏–∫–∏)
- our_actual_position: —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∑–∏—Ü–∏—è (—Å —É—á—ë—Ç–æ–º —Ä–µ–∫–ª–∞–º—ã/–∫–∞—Ä—Ç)
- last_serp_check: –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ SERP
"""

import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import Config
import pymysql

def run_migration():
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    
    print("=" * 60)
    print("üîÑ –ú–ò–ì–†–ê–¶–ò–Ø: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –ø–æ–∑–∏—Ü–∏–π –≤ —Ç–∞–±–ª–∏—Ü—É keywords")
    print("=" * 60)
    
    connection = None
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        connection = pymysql.connect(
            host=Config.DB_HOST,
            port=Config.DB_PORT,
            user=Config.DB_USER,
            password=Config.DB_PASSWORD,
            database=Config.DB_NAME,
            cursorclass=pymysql.cursors.DictCursor
        )
        
        cursor = connection.cursor()
        
        print(f"\n‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {Config.DB_NAME}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ —ç—Ç–∏ –ø–æ–ª—è
        cursor.execute("""
            SELECT COLUMN_NAME 
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = %s 
            AND TABLE_NAME = 'keywords'
            AND COLUMN_NAME IN ('our_organic_position', 'our_actual_position', 'last_serp_check')
        """, (Config.DB_NAME,))
        
        existing_columns = [row['COLUMN_NAME'] for row in cursor.fetchall()]
        
        if len(existing_columns) == 3:
            print("\n‚ö†Ô∏è  –í—Å–µ –ø–æ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç. –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            cursor.close()
            return True
        
        print(f"\nüìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: {existing_columns if existing_columns else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}")
        print(f"üìã –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å: {3 - len(existing_columns)} –ø–æ–ª–µ–π")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç
        migrations_applied = []
        
        if 'our_organic_position' not in existing_columns:
            print("\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è 'our_organic_position'...")
            cursor.execute("""
                ALTER TABLE keywords 
                ADD COLUMN our_organic_position INT DEFAULT NULL 
                COMMENT '–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞ (—Å—Ä–µ–¥–∏ –æ—Ä–≥–∞–Ω–∏–∫–∏)'
            """)
            migrations_applied.append('our_organic_position')
            print("   ‚úÖ –ü–æ–ª–µ 'our_organic_position' –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        
        if 'our_actual_position' not in existing_columns:
            print("\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è 'our_actual_position'...")
            cursor.execute("""
                ALTER TABLE keywords 
                ADD COLUMN our_actual_position INT DEFAULT NULL 
                COMMENT '–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞ (—Å —É—á—ë—Ç–æ–º —Ä–µ–∫–ª–∞–º—ã/–∫–∞—Ä—Ç)'
            """)
            migrations_applied.append('our_actual_position')
            print("   ‚úÖ –ü–æ–ª–µ 'our_actual_position' –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        
        if 'last_serp_check' not in existing_columns:
            print("\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è 'last_serp_check'...")
            cursor.execute("""
                ALTER TABLE keywords 
                ADD COLUMN last_serp_check TIMESTAMP NULL DEFAULT NULL 
                COMMENT '–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ SERP'
            """)
            migrations_applied.append('last_serp_check')
            print("   ‚úÖ –ü–æ–ª–µ 'last_serp_check' –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        
        # –°–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ last_serp_check
        print("\n‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è 'last_serp_check'...")
        try:
            cursor.execute("""
                CREATE INDEX idx_last_serp_check ON keywords(last_serp_check)
            """)
            print("   ‚úÖ –ò–Ω–¥–µ–∫—Å 'idx_last_serp_check' —Å–æ–∑–¥–∞–Ω")
        except pymysql.err.OperationalError as e:
            if "Duplicate key name" in str(e):
                print("   ‚ÑπÔ∏è  –ò–Ω–¥–µ–∫—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            else:
                raise
        
        connection.commit()
        cursor.close()
        
        print("\n" + "=" * 60)
        print("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê")
        print("=" * 60)
        print(f"\nüìä –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ–π: {len(migrations_applied)}")
        if migrations_applied:
            for field in migrations_applied:
                print(f"   - {field}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã keywords:")
        cursor = connection.cursor()
        cursor.execute("""
            SELECT COLUMN_NAME, COLUMN_TYPE, IS_NULLABLE, COLUMN_DEFAULT, COLUMN_COMMENT
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = %s 
            AND TABLE_NAME = 'keywords'
            AND COLUMN_NAME IN ('our_organic_position', 'our_actual_position', 'last_serp_check')
            ORDER BY ORDINAL_POSITION
        """, (Config.DB_NAME,))
        
        columns = cursor.fetchall()
        for col in columns:
            print(f"   ‚úì {col['COLUMN_NAME']}: {col['COLUMN_TYPE']} "
                  f"{'NULL' if col['IS_NULLABLE'] == 'YES' else 'NOT NULL'} "
                  f"({col['COLUMN_COMMENT']})")
        
        cursor.close()
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ú–ò–ì–†–ê–¶–ò–ò: {str(e)}")
        if connection:
            connection.rollback()
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        if connection:
            connection.close()
            print("\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

def rollback_migration():
    """–û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ (—É–¥–∞–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π)"""
    
    print("=" * 60)
    print("‚èÆÔ∏è  –û–¢–ö–ê–¢ –ú–ò–ì–†–ê–¶–ò–ò: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –ø–æ–∑–∏—Ü–∏–π")
    print("=" * 60)
    
    connection = None
    try:
        connection = pymysql.connect(
            host=Config.DB_HOST,
            port=Config.DB_PORT,
            user=Config.DB_USER,
            password=Config.DB_PASSWORD,
            database=Config.DB_NAME,
            cursorclass=pymysql.cursors.DictCursor
        )
        
        cursor = connection.cursor()
        
        print(f"\n‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {Config.DB_NAME}")
        
        # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
        print("\n‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ 'idx_last_serp_check'...")
        try:
            cursor.execute("DROP INDEX idx_last_serp_check ON keywords")
            print("   ‚úÖ –ò–Ω–¥–µ–∫—Å —É–¥–∞–ª—ë–Ω")
        except pymysql.err.OperationalError as e:
            if "check that column/key exists" in str(e):
                print("   ‚ÑπÔ∏è  –ò–Ω–¥–µ–∫—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            else:
                raise
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—è
        fields_to_remove = ['our_organic_position', 'our_actual_position', 'last_serp_check']
        
        for field in fields_to_remove:
            print(f"\n‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—è '{field}'...")
            try:
                cursor.execute(f"ALTER TABLE keywords DROP COLUMN {field}")
                print(f"   ‚úÖ –ü–æ–ª–µ '{field}' —É–¥–∞–ª–µ–Ω–æ")
            except pymysql.err.OperationalError as e:
                if "check that column/key exists" in str(e):
                    print(f"   ‚ÑπÔ∏è  –ü–æ–ª–µ '{field}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                else:
                    raise
        
        connection.commit()
        cursor.close()
        
        print("\n" + "=" * 60)
        print("‚úÖ –û–¢–ö–ê–¢ –ú–ò–ì–†–ê–¶–ò–ò –ó–ê–í–ï–†–®–Å–ù")
        print("=" * 60)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –û–¢–ö–ê–¢–ê: {str(e)}")
        if connection:
            connection.rollback()
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        if connection:
            connection.close()
            print("\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –ø–æ–∑–∏—Ü–∏–π –≤ SERP')
    parser.add_argument('--rollback', action='store_true', help='–û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é')
    
    args = parser.parse_args()
    
    try:
        if args.rollback:
            success = rollback_migration()
        else:
            success = run_migration()
        
        sys.exit(0 if success else 1)
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)
# backend/utils/serp_competitors_helper.py
"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏ –≤ SERP-–∞–Ω–∞–ª–∏–∑–µ
"""

def save_serp_competitors(connection, serp_analysis_id, organic_results, paid_results, maps_results, campaign_id):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏–∑ SERP-–∞–Ω–∞–ª–∏–∑–∞ –≤ –ë–î
    
    Args:
        connection: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        serp_analysis_id: ID –∑–∞–ø–∏—Å–∏ SERP-–∞–Ω–∞–ª–∏–∑–∞
        organic_results: —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        paid_results: —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        maps_results: —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –∫–∞—Ä—Ç
        campaign_id: ID –∫–∞–º–ø–∞–Ω–∏–∏ (–¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞)
    """
    cursor = connection.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –µ–≥–æ
        cursor.execute("""
            SELECT domain FROM campaign_sites WHERE campaign_id = %s
        """, (campaign_id,))
        our_site = cursor.fetchone()
        our_domain = our_site['domain'].lower() if our_site and our_site.get('domain') else None
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã –∏–∑ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        all_domains = []
        
        # –û—Ä–≥–∞–Ω–∏–∫–∞
        for item in organic_results:
            domain = item.get('domain', '').lower().strip()
            if domain and domain != our_domain:
                all_domains.append({
                    'domain': domain,
                    'position': item.get('position'),
                    'url': item.get('url', ''),
                    'title': item.get('title', ''),
                    'result_type': 'organic'
                })
        
        # –†–µ–∫–ª–∞–º–∞
        for item in paid_results:
            domain = item.get('domain', '').lower().strip()
            if domain and domain != our_domain:
                all_domains.append({
                    'domain': domain,
                    'position': item.get('position'),
                    'url': item.get('url', ''),
                    'title': item.get('title', ''),
                    'result_type': 'paid'
                })
        
        # –ö–∞—Ä—Ç—ã
        for item in maps_results:
            domain = item.get('domain', '').lower().strip()
            if domain and domain != our_domain:
                all_domains.append({
                    'domain': domain,
                    'position': item.get('position'),
                    'url': item.get('url', ''),
                    'title': item.get('title', ''),
                    'result_type': 'maps'
                })
        
        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤: {len(set([d['domain'] for d in all_domains]))}")
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–º–µ–Ω–∞
        for item in all_domains:
            domain = item['domain']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–µ–Ω –≤ competitor_schools
            cursor.execute("""
                INSERT IGNORE INTO competitor_schools (domain, org_type, created_at)
                VALUES (%s, '–®–∫–æ–ª–∞', NOW())
            """, (domain,))
            
            # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
            cursor.execute("""
                SELECT id FROM competitor_schools WHERE domain = %s
            """, (domain,))
            competitor = cursor.fetchone()
            
            if competitor:
                competitor_id = competitor['id']
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏
                cursor.execute("""
                    INSERT INTO serp_competitor_appearances 
                    (serp_analysis_id, competitor_id, position, result_type, url, title, created_at)
                    VALUES (%s, %s, %s, %s, %s, %s, NOW())
                """, (
                    serp_analysis_id,
                    competitor_id,
                    item['position'],
                    item['result_type'],
                    item['url'],
                    item['title']
                ))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        update_competitors_competitiveness(connection)
        
        connection.commit()
        print(f"   ‚úÖ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –∏–∑ SERP —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: {e}")
        connection.rollback()
        import traceback
        traceback.print_exc()
    finally:
        cursor.close()


def update_competitors_competitiveness(connection):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, 
    –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º SERP-–∞–Ω–∞–ª–∏–∑–µ –∫–æ—Ç–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –¥–æ–º–µ–Ω
    """
    cursor = connection.cursor()
    
    try:
        cursor.execute("""
            UPDATE competitor_schools c
            SET 
                competitiveness = (
                    SELECT COUNT(DISTINCT sa.keyword_id)
                    FROM serp_competitor_appearances sca
                    JOIN serp_analysis_history sa ON sca.serp_analysis_id = sa.id
                    WHERE sca.competitor_id = c.id
                    AND sa.id IN (
                        SELECT MAX(id) 
                        FROM serp_analysis_history 
                        GROUP BY keyword_id
                    )
                ),
                last_seen_at = (
                    SELECT MAX(sa.analysis_date)
                    FROM serp_competitor_appearances sca
                    JOIN serp_analysis_history sa ON sca.serp_analysis_id = sa.id
                    WHERE sca.competitor_id = c.id
                ),
                updated_at = NOW()
        """)
        connection.commit()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏: {e}")
        connection.rollback()
    finally:
        cursor.close()


def get_competitor_details(connection, competitor_id):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–µ:
    - –í –∫–∞–∫–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è
    - –°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è
    - –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–æ—Ä–≥–∞–Ω–∏–∫–∞/—Ä–µ–∫–ª–∞–º–∞/–∫–∞—Ä—Ç—ã)
    """
    cursor = connection.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        cursor.execute("""
            SELECT * FROM competitor_schools WHERE id = %s
        """, (competitor_id,))
        competitor = cursor.fetchone()
        
        if not competitor:
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è
        cursor.execute("""
            SELECT DISTINCT
                k.id,
                k.keyword,
                sca.position,
                sca.result_type,
                sa.analysis_date
            FROM serp_competitor_appearances sca
            JOIN serp_analysis_history sa ON sca.serp_analysis_id = sa.id
            JOIN keywords k ON sa.keyword_id = k.id
            WHERE sca.competitor_id = %s
            AND sa.id IN (
                SELECT MAX(id) 
                FROM serp_analysis_history 
                GROUP BY keyword_id
            )
            ORDER BY sca.position ASC
        """, (competitor_id,))
        
        keywords = cursor.fetchall()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        cursor.execute("""
            SELECT 
                result_type,
                COUNT(*) as count,
                AVG(position) as avg_position
            FROM serp_competitor_appearances
            WHERE competitor_id = %s
            GROUP BY result_type
        """, (competitor_id,))
        
        result_types_stats = cursor.fetchall()
        
        return {
            'competitor': competitor,
            'keywords': keywords,
            'result_types': result_types_stats
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞: {e}")
        return None
    finally:
        cursor.close()
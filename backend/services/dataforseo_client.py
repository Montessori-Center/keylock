# services/dataforseo_client.py
import requests
import base64
from typing import List, Dict, Any, Optional
from config import Config

class DataForSeoClient:
    
    BASE_URL = "https://api.dataforseo.com/v3"
    
    def __init__(self, login: str = None, password: str = None):
        if login and password:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —è–≤–Ω–æ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
            self.login = login
            self.password = password
            print(f"üîß DataForSeo: –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ credentials: {login}")
        else:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            try:
                from services.config_manager import config_manager
                settings = config_manager.load_settings()
                
                self.login = settings.get('dataforseo_login', '').strip()
                self.password = settings.get('dataforseo_password', '').strip()
                
                # –ï—Å–ª–∏ –≤ —Ñ–∞–π–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—É—Å—Ç–æ, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                if not self.login:
                    import os
                    self.login = os.environ.get('DATAFORSEO_LOGIN', '').strip()
                if not self.password:
                    import os
                    self.password = os.environ.get('DATAFORSEO_PASSWORD', '').strip()
                
                if self.login and self.password:
                    print(f"‚úÖ DataForSeo: –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞: {self.login}")
                else:
                    print(f"‚ö†Ô∏è DataForSeo: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ, –ø—Ä–æ–±—É–µ–º fallback")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ DataForSeo credentials: {e}")
                # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                import os
                self.login = os.environ.get('DATAFORSEO_LOGIN', '').strip()
                self.password = os.environ.get('DATAFORSEO_PASSWORD', '').strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ credentials –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        if not self.login or not self.password:
            raise ValueError(
                "DataForSeo API credentials are required. "
                "Set them in Settings or environment variables DATAFORSEO_LOGIN/DATAFORSEO_PASSWORD"
            )
        
        self.auth_string = base64.b64encode(
            f"{self.login}:{self.password}".encode()
        ).decode()
        
        print(f"üîë DataForSeo client initialized with login: {self.login}")
    
    def _make_request(self, method: str, endpoint: str, data: Any = None) -> Dict:
        """–ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API"""
        url = f"{self.BASE_URL}{endpoint}"
        headers = {
            "Authorization": f"Basic {self.auth_string}",
            "Content-Type": "application/json"
        }
        
        try:
            if method == "GET":
                response = requests.get(url, headers=headers)
            elif method == "POST":
                response = requests.post(url, headers=headers, json=data)
            else:
                raise ValueError(f"Unsupported method: {method}")
            
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"Error making request to DataForSeo: {e}")
            if hasattr(e.response, 'text'):
                print(f"Response: {e.response.text}")
            raise
    
    def get_keywords_for_keywords(
    self,
    keywords: List[str],
    location_code: int = 2804,  # Ukraine
    language_code: str = "ru",
    search_partners: bool = False,
    sort_by: str = "search_volume",
    limit: int = 700,
    include_seed_keyword: bool = True,
    include_clickstream_data: bool = False,
    include_serp_info: bool = True  # –í–∫–ª—é—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ SERP
) -> Dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø–æ seed keywords (LIVE —Ä–µ–∂–∏–º)
    –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_keywords/live/
    
    Args:
        keywords: –°–ø–∏—Å–æ–∫ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–º–∞–∫—Å. 700)
        location_code: –ö–æ–¥ –ª–æ–∫–∞—Ü–∏–∏ (2804 –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã)
        language_code: –ö–æ–¥ —è–∑—ã–∫–∞
        search_partners: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
        sort_by: –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–º–∞–∫—Å. 700 –¥–ª—è live)
        include_seed_keyword: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        include_clickstream_data: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ Clickstream
        include_serp_info: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ SERP
    """
    
    endpoint = "/keywords_data/google_ads/keywords_for_keywords/live"
    
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    data = [{
        "keywords": keywords[:700],  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ API - –º–∞–∫—Å 700 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        "location_code": location_code,
        "language_code": language_code,
        "search_partners": search_partners,
        "sort_by": sort_by,
        "limit": limit,
        "include_seed_keyword": include_seed_keyword,
        "include_clickstream_data": include_clickstream_data,
        "include_serp_info": include_serp_info,
        "date_from": "2024-01-01",  # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    }]
    
    return self._make_request("POST", endpoint, data)
    
    def parse_keywords_response(self, response: Dict) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        """
        keywords_data = []
        
        if not response.get("tasks"):
            print("No tasks in response")
            return keywords_data
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º
        for task in response.get("tasks", []):
            if task.get("status_code") != 20000:
                print(f"Task error: {task.get('status_message')}")
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –∑–∞–¥–∞—á–∏
            if not task.get("result"):
                continue
                
            for result_item in task.get("result", []):
                items = result_item.get("items", [])
                
                for item in items:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
                    keyword_data = item.get("keyword_data", {})
                    keyword_info = keyword_data.get("keyword_info", {})
                    serp_info = keyword_data.get("serp_info", {})
                    impressions_info = keyword_data.get("impressions_info", {})
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    monthly_searches = keyword_info.get("monthly_searches", [])
                    three_month_change = None
                    yearly_change = None
                    
                    if monthly_searches and len(monthly_searches) >= 3:
                        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 3 –º–µ—Å—è—Ü–∞
                        current = monthly_searches[-1].get("search_volume", 0)
                        three_months_ago = monthly_searches[-3].get("search_volume", 0)
                        if three_months_ago > 0:
                            three_month_change = ((current - three_months_ago) / three_months_ago) * 100
                    
                    if monthly_searches and len(monthly_searches) >= 12:
                        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –≥–æ–¥
                        current = monthly_searches[-1].get("search_volume", 0)
                        year_ago = monthly_searches[-12].get("search_volume", 0)
                        if year_ago > 0:
                            yearly_change = ((current - year_ago) / year_ago) * 100
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏
                    competition_level = keyword_info.get("competition", "UNSPECIFIED")
                    competition_map = {
                        "HIGH": "–í—ã—Å–æ–∫–∞—è",
                        "MEDIUM": "–°—Ä–µ–¥–Ω—è—è",
                        "LOW": "–ù–∏–∑–∫–∞—è",
                        "UNSPECIFIED": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    }
                    
                    keywords_data.append({
                        "keyword": keyword_data.get("keyword", ""),
                        "avg_monthly_searches": keyword_info.get("search_volume", 0),
                        "competition": competition_map.get(competition_level, competition_level),
                        "competition_percent": keyword_info.get("competition_index", 0),
                        "min_top_of_page_bid": keyword_info.get("low_top_of_page_bid", 0),
                        "max_top_of_page_bid": keyword_info.get("high_top_of_page_bid", 0),
                        "three_month_change": round(three_month_change, 2) if three_month_change else None,
                        "yearly_change": round(yearly_change, 2) if yearly_change else None,
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ SERP
                        "serp_item_types": serp_info.get("serp_item_types", []),
                        "se_results_count": serp_info.get("se_results_count", 0),
                        
                        # CPC –∏–∑ impressions_info
                        "cpc": impressions_info.get("cpc_max", keyword_info.get("cpc", 0)),
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                        "keyword_difficulty": keyword_data.get("keyword_properties", {}).get("keyword_difficulty", None)
                    })
        
        return keywords_data
    
    def get_search_volume(
        self,
        keywords: List[str],
        location_code: int = 2804,
        language_code: str = "ru",
        search_partners: bool = False
    ) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –Ω—É–∂–Ω—ã —Ç–æ—á–Ω—ã–µ –æ–±—ä–µ–º—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        """
        
        endpoint = "/keywords_data/google_ads/search_volume/live"
        
        data = [{
            "keywords": keywords[:1000],
            "location_code": location_code,
            "language_code": language_code,
            "search_partners": search_partners,
            "date_from": "2024-01-01",
            "sort_by": "search_volume"
        }]
        
        return self._make_request("POST", endpoint, data)
    
    def get_locations(self, country: str = None) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π"""
        endpoint = "/keywords_data/google_ads/locations"
        if country:
            endpoint += f"/{country}"
        return self._make_request("GET", endpoint)
    
    def get_languages(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤"""
        endpoint = "/keywords_data/google_ads/languages"
        return self._make_request("GET", endpoint)
    
    def get_status(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –±–∞–ª–∞–Ω—Å–∞"""
        endpoint = "/appendix/user_data"
        return self._make_request("GET", endpoint)

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
def get_dataforseo_client(login: str = None, password: str = None) -> DataForSeoClient:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä DataForSeoClient —Å –ª–µ–Ω–∏–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
    
    Args:
        login: –õ–æ–≥–∏–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
        password: –ü–∞—Ä–æ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
    
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä DataForSeoClient
        
    Raises:
        ValueError: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å credentials
    """
    try:
        return DataForSeoClient(login, password)
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DataForSeo client: {e}")
        print("üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ Settings")
        raise e

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
_cached_client = None

def get_cached_dataforseo_client() -> DataForSeoClient:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞"""
    global _cached_client
    if _cached_client is None:
        _cached_client = get_dataforseo_client()
    return _cached_client

def clear_client_cache():
    """–û—á–∏—â–∞–µ—Ç –∫—ç—à –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫)"""
    global _cached_client
    _cached_client = None
# backend/config.py
import os
from dotenv import load_dotenv
from urllib.parse import quote_plus

load_dotenv()

# –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–¨: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
USE_SAVED_SETTINGS = True

class Config:
    # Flask
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'dev-secret-key-change-in-production'
    DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'
    
    # Database - —Å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if USE_SAVED_SETTINGS:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        try:
            import sys
            import json
            from pathlib import Path
            from cryptography.fernet import Fernet
            
            # –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_dir = Path(__file__).parent / 'config'
            config_file = config_dir / 'app_config.enc'
            key_file = config_dir / 'app.key'
            
            if config_file.exists() and key_file.exists():
                # –ß–∏—Ç–∞–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
                with open(key_file, 'rb') as f:
                    key = f.read()
                cipher = Fernet(key)
                
                # –ß–∏—Ç–∞–µ–º –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                with open(config_file, 'rb') as f:
                    encrypted_data = f.read()
                decrypted_data = cipher.decrypt(encrypted_data)
                settings = json.loads(decrypted_data.decode())
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î
                DB_HOST = settings.get('db_host', 'localhost')
                DB_PORT = int(settings.get('db_port', 3306))
                DB_NAME = settings.get('db_name', 'keyword_lock')
                DB_USER = settings.get('db_user', 'root')
                DB_PASSWORD = settings.get('db_password', '')
                
                print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î: {DB_HOST}:{DB_PORT}/{DB_NAME}")
            else:
                raise FileNotFoundError("–§–∞–π–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            print("üìã –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env —Ñ–∞–π–ª–∞")
            
            # Fallback –Ω–∞ .env
            DB_HOST = os.environ.get('DB_HOST', 'localhost')
            DB_PORT = int(os.environ.get('DB_PORT', 3306))
            DB_NAME = os.environ.get('DB_NAME', 'keyword_lock')
            DB_USER = os.environ.get('DB_USER', 'root')
            DB_PASSWORD = os.environ.get('DB_PASSWORD', '')
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º .env –Ω–∞–ø—Ä—è–º—É—é
        DB_HOST = os.environ.get('DB_HOST', 'localhost')
        DB_PORT = int(os.environ.get('DB_PORT', 3306))
        DB_NAME = os.environ.get('DB_NAME', 'keyword_lock')
        DB_USER = os.environ.get('DB_USER', 'root')
        DB_PASSWORD = os.environ.get('DB_PASSWORD', '')
        print(f"üìã –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env: {DB_HOST}:{DB_PORT}/{DB_NAME}")
    
    # URL encode password if it contains special characters
    DB_PASSWORD_ENCODED = quote_plus(DB_PASSWORD) if DB_PASSWORD else ''
    
    SQLALCHEMY_DATABASE_URI = f'mysql+pymysql://{DB_USER}:{DB_PASSWORD_ENCODED}@{DB_HOST}:{DB_PORT}/{DB_NAME}?charset=utf8mb4'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    
    # DataForSeo API - —Ç–æ–∂–µ –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏
    if USE_SAVED_SETTINGS:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –≤—ã—à–µ
            if 'settings' in locals():
                DATAFORSEO_LOGIN = settings.get('dataforseo_login', 'developer@montessori.ua')
                DATAFORSEO_PASSWORD = settings.get('dataforseo_password', 'dcd79673da5095cb')
                print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DataForSeo: {DATAFORSEO_LOGIN}")
            else:
                raise Exception("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except:
            # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            DATAFORSEO_LOGIN = 'developer@montessori.ua'
            DATAFORSEO_PASSWORD = 'dcd79673da5095cb'
            print("üìã –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DataForSeo")
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        DATAFORSEO_LOGIN = 'developer@montessori.ua'
        DATAFORSEO_PASSWORD = 'dcd79673da5095cb'
    
    # Encryption key for sensitive data
    ENCRYPTION_KEY = os.environ.get('ENCRYPTION_KEY') or 'generate-strong-key-for-production'
    
    # CORS - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–ª—è HTTPS
    cors_origins = os.environ.get('CORS_ORIGINS', 'http://localhost:3000').split(',')
    CORS_ORIGINS = [origin.strip() for origin in cors_origins]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ–º–µ–Ω–∞ –¥–ª—è HTTPS
    CORS_ORIGINS.extend([
        'https://keylock.interschool.online',
        'https://www.keylock.interschool.online',
        'http://keylock.interschool.online',
        'http://www.keylock.interschool.online',
        'http://127.0.0.1:3000',
        'http://localhost:3000'
    ])
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏
    CORS_ORIGINS = list(set(CORS_ORIGINS))
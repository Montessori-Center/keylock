#!/usr/bin/env python3
# backend/debug_colors.py - —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–≤–µ—Ç–æ–≤ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π

import pymysql
from config import Config
import json

def check_colors():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–≤–µ—Ç–∞—Ö –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
    try:
        connection = pymysql.connect(
            host=Config.DB_HOST,
            port=Config.DB_PORT,
            user=Config.DB_USER,
            password=Config.DB_PASSWORD,
            database=Config.DB_NAME,
            cursorclass=pymysql.cursors.DictCursor
        )
        cursor = connection.cursor()
        
        print("=" * 60)
        print("üé® –ü–†–û–í–ï–†–ö–ê –¶–í–ï–¢–û–í –ù–û–í–´–• –ó–ê–ü–ò–°–ï–ô")
        print("=" * 60)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("DESCRIBE keywords")
        columns = cursor.fetchall()
        has_is_new = any(col['Field'] == 'is_new' for col in columns)
        has_batch_color = any(col['Field'] == 'batch_color' for col in columns)
        
        print(f"\n‚úÖ –ü–æ–ª–µ is_new: {'—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' if has_is_new else '–ù–ï –ù–ê–ô–î–ï–ù–û!'}")
        print(f"‚úÖ –ü–æ–ª–µ batch_color: {'—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' if has_batch_color else '–ù–ï –ù–ê–ô–î–ï–ù–û!'}")
        
        if not has_is_new or not has_batch_color:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
            print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ:")
            print("  python3 add_is_new_field.py")
            print("  python3 add_batch_color_field.py")
            return
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
        cursor.execute("""
            SELECT ad_group_id, COUNT(*) as count, 
                   GROUP_CONCAT(DISTINCT batch_color) as colors
            FROM keywords 
            WHERE is_new = TRUE
            GROUP BY ad_group_id
        """)
        new_records = cursor.fetchall()
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ù–û–í–´–• –ó–ê–ü–ò–°–ï–ô:")
        print("-" * 40)
        
        if not new_records:
            print("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π (is_new = TRUE)")
        else:
            for record in new_records:
                print(f"–ì—Ä—É–ø–ø–∞ {record['ad_group_id']}: {record['count']} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")
                print(f"  –¶–≤–µ—Ç–∞: {record['colors']}")
        
        # 3. –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
        cursor.execute("""
            SELECT id, ad_group_id, keyword, is_new, batch_color
            FROM keywords 
            WHERE is_new = TRUE
            LIMIT 10
        """)
        details = cursor.fetchall()
        
        if details:
            print(f"\nüìù –ü–†–ò–ú–ï–†–´ –ù–û–í–´–• –ó–ê–ü–ò–°–ï–ô (–ø–µ—Ä–≤—ã–µ 10):")
            print("-" * 40)
            for row in details:
                print(f"ID {row['id']}: {row['keyword'][:30]}")
                print(f"  –ì—Ä—É–ø–ø–∞: {row['ad_group_id']}, –¶–≤–µ—Ç: {row['batch_color']}")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤
        cursor.execute("""
            SELECT batch_color, COUNT(*) as count, 
                   GROUP_CONCAT(DISTINCT ad_group_id) as groups
            FROM keywords 
            WHERE is_new = TRUE AND batch_color IS NOT NULL
            GROUP BY batch_color
        """)
        color_usage = cursor.fetchall()
        
        if color_usage:
            print(f"\nüé® –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –¶–í–ï–¢–û–í:")
            print("-" * 40)
            for color in color_usage:
                print(f"–¶–≤–µ—Ç {color['batch_color']}: {color['count']} –∑–∞–ø–∏—Å–µ–π –≤ –≥—Ä—É–ø–ø–∞—Ö {color['groups']}")
        
        cursor.close()
        connection.close()
        
        print("\n" + "=" * 60)
        print("‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        print("=" * 60)
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

def reset_test_colors():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ —Å —Ü–≤–µ—Ç–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    try:
        connection = pymysql.connect(
            host=Config.DB_HOST,
            port=Config.DB_PORT,
            user=Config.DB_USER,
            password=Config.DB_PASSWORD,
            database=Config.DB_NAME
        )
        cursor = connection.cursor()
        
        print("\nüîß –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–ï–°–¢–û–í–´–• –ù–û–í–´–• –ó–ê–ü–ò–°–ï–ô...")
        
        # –ü–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤
        colors = ['#fff2cc', '#e1d5e7', '#dae8fc', '#d5e8d4', '#ffe6cc']
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ is_new —Ñ–ª–∞–≥–∏
        cursor.execute("UPDATE keywords SET is_new = FALSE, batch_color = NULL")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 2 –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –ø–µ—Ä–≤—ã–µ 3 –≥—Ä—É–ø–ø—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
        for ad_group_id in range(1, 4):
            color = colors[ad_group_id - 1]
            cursor.execute("""
                UPDATE keywords 
                SET is_new = TRUE, batch_color = %s
                WHERE ad_group_id = %s
                LIMIT 2
            """, (color, ad_group_id))
            
            affected = cursor.rowcount
            print(f"  –ì—Ä—É–ø–ø–∞ {ad_group_id}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ü–≤–µ—Ç {color} –¥–ª—è {affected} –∑–∞–ø–∏—Å–µ–π")
        
        connection.commit()
        cursor.close()
        connection.close()
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == '--test':
        reset_test_colors()
    
    check_colors()
    
    if len(sys.argv) == 1:
        print("\n–°–æ–≤–µ—Ç: –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å —Ñ–ª–∞–≥–æ–º --test –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        print("  python3 debug_colors.py --test")
# backend/api/settings.py
from flask import Blueprint, request, jsonify
from services.config_manager import config_manager
import pymysql
import os
import sys
import signal
import threading
import time

settings_bp = Blueprint('settings', __name__)

@settings_bp.route('/get', methods=['GET'])
def get_settings():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        settings = config_manager.load_settings()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø–∞—Ä–æ–ª–∏ –±—É–¥—É—Ç —Å–∫—Ä—ã—Ç—ã –Ω–∞ frontend)
        return jsonify({
            'success': True,
            'settings': settings
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

def restart_app():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    print("\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ë–î...")
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ os.execv
    python = sys.executable
    os.execv(python, [python] + sys.argv)

@settings_bp.route('/save', methods=['POST'])
def save_settings():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        data = request.json
        print(f"üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {list(data.keys())}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        current_settings = config_manager.load_settings()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î
        db_settings_changed = False
        db_keys = ['db_host', 'db_port', 'db_name', 'db_user', 'db_password']
        
        for key in db_keys:
            if key in data and data[key] != current_settings.get(key):
                db_settings_changed = True
                print(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î: {key}")
                break
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        current_settings.update(data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        if config_manager.save_settings(current_settings):
            if db_settings_changed:
                print("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î –∏–∑–º–µ–Ω–µ–Ω—ã - –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")
                return jsonify({
                    'success': True,
                    'message': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.',
                    'requires_restart': True,
                    'restart_message': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î –∏–∑–º–µ–Ω–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n\n–í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.\n\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–π—á–∞—Å?'
                })
            else:
                return jsonify({
                    'success': True,
                    'message': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!',
                    'requires_restart': False
                })
        else:
            return jsonify({'success': False, 'error': '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞'}), 500
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

@settings_bp.route('/restart', methods=['POST'])
def restart_application():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        print("üîÑ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        restart_thread = threading.Thread(target=restart_app)
        restart_thread.daemon = True
        restart_thread.start()
        
        return jsonify({
            'success': True,
            'message': '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω...'
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

@settings_bp.route('/test-db', methods=['POST'])
def test_db_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    try:
        data = request.json
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {data['host']}:{data['port']}/{data['name']}")
        
        connection = pymysql.connect(
            host=data['host'],
            port=int(data['port']),
            user=data['user'],
            password=data['password'],
            database=data['name'],
            connect_timeout=5
        )
        connection.ping()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü
        cursor = connection.cursor()
        cursor.execute("SHOW TABLES")
        tables = cursor.fetchall()
        cursor.close()
        connection.close()
        
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –Ω–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        return jsonify({
            'success': True, 
            'message': f'–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}'
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {str(e)}")
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}'})

@settings_bp.route('/test-dataforseo', methods=['POST'])
def test_dataforseo_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DataForSeo API"""
    try:
        data = request.json
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DataForSeo API: {data['login']}")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        from services.dataforseo_client import DataForSeoClient
        temp_client = DataForSeoClient(data['login'], data['password'])
        status = temp_client.get_status()
        
        if status.get('tasks') and status['tasks'][0].get('result'):
            result = status['tasks'][0]['result'][0]
            balance = result.get('money', {}).get('balance', 0)
            print(f"‚úÖ DataForSeo API —Ä–∞–±–æ—Ç–∞–µ—Ç, –±–∞–ª–∞–Ω—Å: ${balance}")
            return jsonify({
                'success': True, 
                'message': f'API —Ä–∞–±–æ—Ç–∞–µ—Ç! –ë–∞–ª–∞–Ω—Å: ${balance:.2f}'
            })
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ DataForSeo")
            return jsonify({'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'})
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ DataForSeo API: {str(e)}")
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞ API: {str(e)}'})

@settings_bp.route('/current-db', methods=['GET'])
def get_current_db_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ë–î"""
    try:
        from config import Config
        
        return jsonify({
            'success': True,
            'current_db': {
                'host': Config.DB_HOST,
                'port': Config.DB_PORT,
                'name': Config.DB_NAME,
                'user': Config.DB_USER
                # –ü–∞—Ä–æ–ª—å –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
            }
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500
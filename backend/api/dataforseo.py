# api/dataforseo.py
from flask import Blueprint, request, jsonify
from config import Config
import pymysql
from typing import Dict
from datetime import datetime
from services.dataforseo_client import get_dataforseo_client, DataForSeoClient
import sys

dataforseo_bp = Blueprint('dataforseo', __name__)

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π flush –¥–ª—è –ª–æ–≥–æ–≤
def log_print(*args, **kwargs):
    print(*args, **kwargs)
    sys.stdout.flush()

@dataforseo_bp.route('/test', methods=['GET', 'POST'])
def test_endpoint():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç endpoint"""
    try:
        print("üß™ TEST ENDPOINT –í–´–ó–í–ê–ù!")
        print(f"   Method: {request.method}")
        if request.method == 'POST':
            data = request.get_json()
            print(f"   Data: {data}")
        
        return jsonify({
            'success': True,
            'message': 'Test endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç!',
            'method': request.method,
            'timestamp': str(datetime.utcnow())
        })
    except Exception as e:
        print(f"‚ùå Test endpoint error: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

def get_db_connection():
    """–°–æ–∑–¥–∞—ë—Ç –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    return pymysql.connect(
        host=Config.DB_HOST,
        port=Config.DB_PORT,
        user=Config.DB_USER,
        password=Config.DB_PASSWORD,
        database=Config.DB_NAME,
        cursorclass=pymysql.cursors.DictCursor
    )

@dataforseo_bp.route('/get-keywords-simple', methods=['POST'])
def get_keywords_simple():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ DataForSeo"""
    try:
        print("üß™ SIMPLE TEST –í–´–ó–í–ê–ù!")
        data = request.get_json()
        print(f"   –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {list(data.keys()) if data else 'None'}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
        import time
        time.sleep(1)
        
        return jsonify({
            'success': True,
            'message': '–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!',
            'received_keys': list(data.keys()) if data else [],
            'stats': {
                'total_results': 5,
                'added': 3,
                'updated': 2,
                'errors': 0,
                'cost': 0.00
            }
        })
    except Exception as e:
        print(f"‚ùå Simple test error: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@dataforseo_bp.route('/get-keywords', methods=['POST'])
def get_new_keywords():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≤—ã–¥–∞—á–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —á–µ—Ä–µ–∑ DataForSeo"""
    connection = None
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï - –î–û–õ–ñ–ù–û –ü–û–Ø–í–ò–¢–¨–°–Ø –í –õ–Æ–ë–û–ú –°–õ–£–ß–ê–ï
    print("!" * 50)
    print("üö® GET-KEYWORDS ENDPOINT –í–´–ó–í–ê–ù!")
    print(f"üö® Method: {request.method}")
    print(f"üö® Content-Type: {request.content_type}")
    print(f"üö® Headers: {dict(request.headers)}")
    sys.stdout.flush()
    
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        try:
            data = request.get_json()
            print(f"üö® JSON DATA: {data}")
        except Exception as json_error:
            print(f"üö® JSON ERROR: {json_error}")
            return jsonify({'success': False, 'error': f'JSON parse error: {str(json_error)}'}), 400
        
        if not data:
            print("üö® NO DATA IN REQUEST")
            return jsonify({'success': False, 'error': 'No data in request'}), 400
        
        print("üö® PROCESSING REQUEST...")
        sys.stdout.flush()
        
        log_print("=" * 50)
        log_print("üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ get-keywords")
        log_print("=" * 50)
        
        data = request.json
        log_print(f"üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {list(data.keys()) if data else 'None'}")
        
        seed_keywords = data.get('seed_keywords', [])
        ad_group_id = data.get('ad_group_id')
        
        log_print(f"üîë Seed keywords count: {len(seed_keywords)}")
        log_print(f"üîë –ü–µ—Ä–≤—ã–µ 3 keywords: {seed_keywords[:3] if seed_keywords else '–ù–µ—Ç'}")
        log_print(f"üè∑Ô∏è  Ad group ID: {ad_group_id}")
        
        # –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ frontend
        location_name = data.get('location_name')
        location_code = data.get('location_code', 2804)
        language_code = data.get('language_code', 'ru')
        limit = data.get('limit', 700)
        search_partners = data.get('search_partners', False)
        date_from = data.get('date_from')
        date_to = data.get('date_to')
        include_seed_keyword = data.get('include_seed_keyword', True)
        include_clickstream_data = data.get('include_clickstream_data', False)
        include_serp_info = data.get('include_serp_info', False)
        sort_by = data.get('sort_by', 'relevance')
        
        log_print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã DataForSeo –∑–∞–ø—Ä–æ—Å–∞:")
        log_print(f"  - Seed keywords: {seed_keywords[:2]}... ({len(seed_keywords)} total)")
        log_print(f"  - Location: {location_name or f'code {location_code}'}")
        log_print(f"  - Language: {language_code}")
        log_print(f"  - Limit: {limit}")
        log_print(f"  - Date range: {date_from} to {date_to}")
        log_print(f"  - Include SERP: {include_serp_info}")
        log_print(f"  - Include Clickstream: {include_clickstream_data}")
        log_print(f"  - Sort by: {sort_by}")
        
        if not seed_keywords:
            log_print("‚ùå –ù–µ—Ç seed keywords")
            return jsonify({'success': False, 'error': 'No seed keywords provided'}), 400
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        log_print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
        connection = get_db_connection()
        cursor = connection.cursor()
        log_print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        log_print(f"üîç –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å ID: {ad_group_id}")
        cursor.execute("SELECT * FROM ad_groups WHERE id = %s", (ad_group_id,))
        ad_group = cursor.fetchone()
        
        if not ad_group:
            log_print("‚ùå –ì—Ä—É–ø–ø–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return jsonify({'success': False, 'error': 'Ad group not found'}), 404
        
        log_print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {ad_group['name']}")
        campaign_id = ad_group['campaign_id']
        
        # –ó–∞–ø—Ä–æ—Å –∫ DataForSeo (Live —Ä–µ–∂–∏–º)
        try:
            log_print("üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DataForSeo –∫–ª–∏–µ–Ω—Ç–∞...")
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
            dataforseo_client = get_dataforseo_client()
            log_print("‚úÖ DataForSeo –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º keywords_data –¥–æ API –∑–∞–ø—Ä–æ—Å–∞
            keywords_data = []
            
            log_print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ DataForSeo API...")
            response = dataforseo_client.get_keywords_for_keywords(
                keywords=seed_keywords,
                location_code=location_code,
                language_code=language_code,
                search_partners=search_partners,
                sort_by=sort_by,
                limit=limit,
                include_seed_keyword=include_seed_keyword,
                include_clickstream_data=include_clickstream_data,
                include_serp_info=include_serp_info
            )
            
            log_print(f"üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç DataForSeo")
            log_print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(response.keys()) if response else 'None'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            if not response.get('tasks'):
                log_print("‚ùå –ù–µ—Ç tasks –≤ –æ—Ç–≤–µ—Ç–µ")
                log_print(f"üìä –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {response}")
                return jsonify({
                    'success': False,
                    'error': 'No data received from DataForSeo'
                }), 500
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É
            task = response['tasks'][0]
            task_status = task.get('status_code')
            log_print(f"üìã Status code: {task_status}")
            log_print(f"üìã Status message: {task.get('status_message', 'No message')}")
            
            if task_status != 20000:
                error_msg = task.get('status_message', 'Unknown error')
                log_print(f"‚ùå DataForSeo –æ—à–∏–±–∫–∞: {error_msg}")
                return jsonify({
                    'success': False,
                    'error': f"DataForSeo error: {error_msg}"
                }), 500
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
            request_cost = task.get('cost', 0.05)
            log_print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞: ${request_cost}")
            
        except ValueError as credentials_error:
            log_print(f"üîë –û—à–∏–±–∫–∞ credentials: {str(credentials_error)}")
            return jsonify({
                'success': False,
                'error': f'DataForSeo API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {str(credentials_error)}'
            }), 400
        except Exception as e:
            log_print(f"üí• DataForSeo API –æ—à–∏–±–∫–∞: {str(e)}")
            import traceback
            traceback.print_exc()
            return jsonify({
                'success': False,
                'error': f'DataForSeo API error: {str(e)}'
            }), 500
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        log_print("üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ DataForSeo...")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            keywords_data = dataforseo_client.parse_keywords_response(response)
            log_print(f"üìà –ü–æ–ª—É—á–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(keywords_data)}")
        except Exception as parse_error:
            log_print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(parse_error)}")
            import traceback
            traceback.print_exc()
            keywords_data = []  # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —á—Ç–æ keywords_data –≤—Å–µ–≥–¥–∞ —Å–ø–∏—Å–æ–∫
        
        # –ï–°–õ–ò –ü–ê–†–°–ò–ù–ì –ù–ï –†–ê–ë–û–¢–ê–ï–¢ - –ü–†–û–ë–£–ï–ú –ü–†–û–°–¢–û–ô:
        if len(keywords_data) == 0:
            log_print("‚ùå –û–°–ù–û–í–ù–û–ô –ü–ê–†–°–ò–ù–ì –ù–ï –†–ê–ë–û–¢–ê–ï–¢! –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥...")
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞–ø—Ä—è–º—É—é
            simple_keywords = []
            if response.get('tasks') and len(response['tasks']) > 0:
                task = response['tasks'][0]
                if task.get('result') and len(task['result']) > 0:
                    result_items = task['result']
                    for item in result_items:
                        simple_keywords.append({
                            'keyword': item.get('keyword', 'Unknown'),
                            'avg_monthly_searches': item.get('search_volume', 0),
                            'competition': '–°—Ä–µ–¥–Ω—è—è',  # –í—Ä–µ–º–µ–Ω–Ω–æ
                            'competition_percent': item.get('competition_index', 0),
                            'min_top_of_page_bid': item.get('low_top_of_page_bid', 0),
                            'max_top_of_page_bid': item.get('high_top_of_page_bid', 0),
                            'cpc': item.get('cpc', 0),
                            'has_ads': False,  # –í—Ä–µ–º–µ–Ω–Ω–æ
                            'has_maps': False,  # –í—Ä–µ–º–µ–Ω–Ω–æ
                        })
            
            log_print(f"üîß –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–ª: {len(simple_keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
            if len(simple_keywords) > 0:
                log_print(f"   –ü—Ä–∏–º–µ—Ä: {simple_keywords[0]}")
                keywords_data = simple_keywords  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥
        
        if len(keywords_data) > 0:
            log_print(f"üìù –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: {keywords_data[0].get('keyword', 'N/A')}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –ë–î
        added_count = 0
        updated_count = 0
        errors = []
        
        for kw_data in keywords_data:
            try:
                keyword_text = kw_data['keyword']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
                cursor.execute(
                    "SELECT * FROM keywords WHERE ad_group_id = %s AND keyword = %s",
                    (ad_group_id, keyword_text)
                )
                existing = cursor.fetchone()
                
                if existing:
                    # –û–ë–ù–û–í–õ–Ø–ï–ú —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –í–°–ï–ú–ò —Å–≤–µ–∂–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    log_print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword_text}")
                    
                    update_query = """
                        UPDATE keywords SET 
                            avg_monthly_searches = %s,
                            competition = %s,
                            competition_percent = %s,
                            min_top_of_page_bid = %s,
                            max_top_of_page_bid = %s,
                            three_month_change = %s,
                            yearly_change = %s,
                            max_cpc = %s,
                            has_ads = %s,
                            has_google_maps = %s,
                            intent_type = %s,
                            updated_at = NOW()
                        WHERE id = %s
                    """
                    
                    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    new_cpc = kw_data.get('cpc')
                    update_data = (
                        kw_data.get('avg_monthly_searches', 0),
                        kw_data.get('competition', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                        kw_data.get('competition_percent', 0),
                        kw_data.get('min_top_of_page_bid', 0),
                        kw_data.get('max_top_of_page_bid', 0),
                        kw_data.get('three_month_change'),
                        kw_data.get('yearly_change'),
                        new_cpc if new_cpc and new_cpc > 0 else existing['max_cpc'],
                        kw_data.get('has_ads', False) if include_serp_info else existing['has_ads'],
                        kw_data.get('has_maps', False) if include_serp_info else existing['has_google_maps'],
                        determine_intent_type(kw_data) if include_serp_info else existing['intent_type'],
                        existing['id']
                    )
                    
                    cursor.execute(update_query, update_data)
                    updated_count += 1
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
                log_print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword_text}")
                
                insert_query = """
                    INSERT INTO keywords (
                        campaign_id, ad_group_id, keyword, criterion_type, status,
                        avg_monthly_searches, competition, competition_percent,
                        min_top_of_page_bid, max_top_of_page_bid, three_month_change,
                        yearly_change, max_cpc, has_ads, has_google_maps, intent_type,
                        is_new
                    ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                """
                
                insert_data = (
                    campaign_id,
                    ad_group_id,
                    keyword_text,
                    'Phrase',
                    'Enabled',
                    kw_data.get('avg_monthly_searches', 0),
                    kw_data.get('competition', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    kw_data.get('competition_percent', 0),
                    kw_data.get('min_top_of_page_bid', 0),
                    kw_data.get('max_top_of_page_bid', 0),
                    kw_data.get('three_month_change'),
                    kw_data.get('yearly_change'),
                    kw_data.get('cpc', 3.61),
                    kw_data.get('has_ads', False) if include_serp_info else False,
                    kw_data.get('has_maps', False) if include_serp_info else False,
                    determine_intent_type(kw_data) if include_serp_info else '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π',
                    True  # is_new = TRUE –¥–ª—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
                )
                
                cursor.execute(insert_query, insert_data)
                added_count += 1
                
            except Exception as e:
                errors.append(f"Error processing '{kw_data.get('keyword', 'unknown')}': {str(e)}")
                log_print(f"‚ùå Error processing keyword: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        try:
            connection.commit()
            log_print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_count}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count}")
        except Exception as e:
            connection.rollback()
            log_print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {str(e)}")
            return jsonify({
                'success': False,
                'error': f'Database error: {str(e)}'
            }), 500
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        result = {
            'success': True,
            'message': f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(keywords_data)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤. –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_count}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å–≤–µ–∂–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {updated_count}',
            'stats': {
                'total_results': len(keywords_data),
                'added': added_count,
                'updated': updated_count,
                'errors': len(errors),
                'cost': request_cost if 'request_cost' in locals() else 0.05
            },
            'cost': request_cost if 'request_cost' in locals() else 0.05
        }
        
        if errors:
            result['errors'] = errors[:10]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
        
        log_print(f"‚úÖ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {result}")
        return jsonify(result)
        
    except Exception as e:
        log_print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()
        if connection:
            connection.rollback()
        return jsonify({'success': False, 'error': str(e)}), 500
    finally:
        if connection:
            connection.close()
        
@dataforseo_bp.route('/test-connection', methods=['POST'])
def test_dataforseo_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DataForSeo API"""
    try:
        data = request.json
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        temp_client = DataForSeoClient(data['login'], data['password'])
        status = temp_client.get_status()
        
        if status.get('tasks') and status['tasks'][0].get('result'):
            balance = status['tasks'][0]['result'][0].get('money', {}).get('balance', 0)
            return jsonify({
                'success': True, 
                'message': f'API —Ä–∞–±–æ—Ç–∞–µ—Ç. –ë–∞–ª–∞–Ω—Å: ${balance}'
            })
        else:
            return jsonify({'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'})
    except Exception as e:
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞ API: {str(e)}'})

@dataforseo_bp.route('/check-balance', methods=['GET'])
def check_balance():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ DataForSeo"""
    try:
        dataforseo_client = get_dataforseo_client()
        status = dataforseo_client.get_status()
        
        if status.get('tasks') and status['tasks'][0].get('result'):
            result = status['tasks'][0]['result'][0]
            return jsonify({
                'success': True,
                'balance': {
                    'money': result.get('money', {}).get('balance', 0),
                    'currency': 'USD'
                },
                'rates': {
                    'keywords_for_keywords': result.get('rates', {}).get('keywords_data', {}).get('google_ads', {}).get('keywords_for_keywords', {}).get('live', 0.05),
                    'serp': result.get('rates', {}).get('serp', {}).get('live', {}).get('regular', 0.01)
                }
            })
    except ValueError as e:
        return jsonify({
            'success': False,
            'error': f'DataForSeo API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {str(e)}'
        }), 400
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@dataforseo_bp.route('/locations', methods=['GET'])
def get_locations():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π"""
    try:
        country = request.args.get('country')
        dataforseo_client = get_dataforseo_client()
        locations = dataforseo_client.get_locations(country)
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
        popular = [
            {'code': 2804, 'name': 'Ukraine', 'name_ru': '–£–∫—Ä–∞–∏–Ω–∞'},
            {'code': 2840, 'name': 'United States', 'name_ru': '–°–®–ê'},
            {'code': 2643, 'name': 'Russia', 'name_ru': '–†–æ—Å—Å–∏—è'},
            {'code': 2276, 'name': 'Germany', 'name_ru': '–ì–µ—Ä–º–∞–Ω–∏—è'},
            {'code': 2826, 'name': 'United Kingdom', 'name_ru': '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è'},
            {'code': 2250, 'name': 'France', 'name_ru': '–§—Ä–∞–Ω—Ü–∏—è'},
            {'code': 2616, 'name': 'Poland', 'name_ru': '–ü–æ–ª—å—à–∞'},
            {'code': 2724, 'name': 'Spain', 'name_ru': '–ò—Å–ø–∞–Ω–∏—è'},
            {'code': 2380, 'name': 'Italy', 'name_ru': '–ò—Ç–∞–ª–∏—è'},
            {'code': 2124, 'name': 'Canada', 'name_ru': '–ö–∞–Ω–∞–¥–∞'},
        ]
        
        return jsonify({
            'success': True,
            'popular': popular,
            'all': locations.get('tasks', [{}])[0].get('result', []) if locations else []
        })
    except ValueError as e:
        return jsonify({'success': False, 'error': f'DataForSeo API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {str(e)}'}), 400
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@dataforseo_bp.route('/languages', methods=['GET'])
def get_languages():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤"""
    try:
        dataforseo_client = get_dataforseo_client()
        languages = dataforseo_client.get_languages()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —è–∑—ã–∫–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
        main_languages = [
            {'code': 'ru', 'name': '–†—É—Å—Å–∫–∏–π'},
            {'code': 'uk', 'name': '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π'},
            {'code': 'en', 'name': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π'},
            {'code': 'de', 'name': '–ù–µ–º–µ—Ü–∫–∏–π'},
            {'code': 'fr', 'name': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π'},
            {'code': 'es', 'name': '–ò—Å–ø–∞–Ω—Å–∫–∏–π'},
            {'code': 'it', 'name': '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π'},
            {'code': 'pl', 'name': '–ü–æ–ª—å—Å–∫–∏–π'},
        ]
        
        return jsonify({
            'success': True,
            'main': main_languages,
            'all': languages.get('tasks', [{}])[0].get('result', []) if languages else []
        })
    except ValueError as e:
        return jsonify({'success': False, 'error': f'DataForSeo API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {str(e)}'}), 400
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

def determine_intent_type(keyword_data: Dict) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    
    Args:
        keyword_data: –î–∞–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ DataForSeo
        
    Returns:
        –¢–∏–ø –∏–Ω—Ç–µ–Ω—Ç–∞: –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π, –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π, –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π, –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–π
    """
    
    keyword = keyword_data.get('keyword', '').lower()
    serp_types = keyword_data.get('serp_item_types', [])
    
    # –ê–Ω–∞–ª–∏–∑ SERP —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –º–µ—Ç–æ–¥)
    if serp_types:
        # –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ SERP
        commercial_serp_types = {'shopping', 'paid', 'google_ads', 'local_pack', 'maps'}
        if any(serp_type in commercial_serp_types for serp_type in serp_types):
            return '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π'
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ SERP
        informational_serp_types = {'featured_snippet', 'people_also_ask', 'knowledge_graph', 'video'}
        if any(serp_type in informational_serp_types for serp_type in serp_types):
            return '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π'
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        if 'knowledge_panel' in serp_types:
            return '–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π'
    
    # –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥)
    # –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    commercial_words = [
        '–∫—É–ø–∏—Ç—å', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '–º–∞–≥–∞–∑–∏–Ω', '–Ω–µ–¥–æ—Ä–æ–≥–æ', '–¥–µ—à–µ–≤–æ',
        '–∞–∫—Ü–∏—è', '—Å–∫–∏–¥–∫–∞', '—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞', '–¥–æ—Å—Ç–∞–≤–∫–∞', '–æ–ø–ª–∞—Ç–∞', '–ø—Ä–∞–π—Å',
        'buy', 'price', 'shop', 'store', 'cheap', 'discount', 'sale', 'order'
    ]
    
    # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    transactional_words = [
        '—Å–∫–∞—á–∞—Ç—å', 'download', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–≤—Ö–æ–¥', 'login', 'signup',
        '–ø–æ–¥–ø–∏—Å–∫–∞', '–æ—Ñ–æ—Ä–º–∏—Ç—å', '–ø–æ–ª—É—á–∏—Ç—å', '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å'
    ]
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    informational_words = [
        '–∫–∞–∫', '—á—Ç–æ', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–∫–æ–≥–¥–∞', '–∫–∞–∫–æ–π', '–≥–¥–µ', '–∫—Ç–æ',
        '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', '—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ', '–æ–±–∑–æ—Ä', '–æ—Ç–∑—ã–≤—ã', '—Ä–µ–π—Ç–∏–Ω–≥',
        'how', 'what', 'why', 'when', 'where', 'who', 'guide', 'tutorial'
    ]
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–±—Ä–µ–Ω–¥—ã, —Å–∞–π—Ç—ã)
    navigational_words = [
        '—Å–∞–π—Ç', '–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π', 'website', 'official', '.com', '.ua', '.ru',
        'facebook', 'instagram', 'youtube', 'google', '–≤–∫–æ–Ω—Ç–∞–∫—Ç–µ'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    if any(word in keyword for word in commercial_words):
        return '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π'
    
    if any(word in keyword for word in transactional_words):
        return '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–π'
    
    if any(word in keyword for word in navigational_words):
        return '–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π'
    
    if any(word in keyword for word in informational_words):
        return '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π'
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π
    return '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π'

@dataforseo_bp.route('/estimate-cost', methods=['POST'])
def estimate_cost():
    """–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        data = request.json
        include_serp = data.get('include_serp_info', False)
        include_clickstream = data.get('include_clickstream_data', False)
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        cost = 0.05
        if include_serp:
            cost += 0.02
        if include_clickstream:
            cost += 0.03
        
        return jsonify({
            'success': True,
            'estimated_cost': cost
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500
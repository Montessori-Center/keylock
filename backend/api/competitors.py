# backend/api/competitors.py
from flask import Blueprint, request, jsonify
import pymysql
from config import Config
from datetime import datetime

competitors_bp = Blueprint('competitors', __name__)

def get_db_connection():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    return pymysql.connect(
        host=Config.DB_HOST,
        port=Config.DB_PORT,
        user=Config.DB_USER,
        password=Config.DB_PASSWORD,
        database=Config.DB_NAME,
        cursorclass=pymysql.cursors.DictCursor
    )

@competitors_bp.route('/list', methods=['GET'])
def get_competitors():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —Å —Ä–∞—Å—á—ë—Ç–æ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
    connection = None
    try:
        print("üìã GET /api/competitors/list called")
        connection = get_db_connection()
        cursor = connection.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —Å —Ä–∞—Å—á—ë—Ç–æ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º SERP –∫–æ—Ç–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –¥–æ–º–µ–Ω
        cursor.execute("""
            SELECT 
                c.id,
                c.domain,
                c.org_type,
                c.notes,
                c.last_seen_at,
                c.created_at,
                c.updated_at,
                COUNT(DISTINCT sca.serp_analysis_id) as appearances_count,
                (
                    SELECT COUNT(DISTINCT sa.keyword_id)
                    FROM serp_competitor_appearances sca2
                    JOIN serp_analysis_history sa ON sca2.serp_analysis_id = sa.id
                    WHERE sca2.competitor_id = c.id
                    AND sa.id IN (
                        SELECT MAX(id) 
                        FROM serp_analysis_history 
                        GROUP BY keyword_id
                    )
                ) as competitiveness
            FROM competitor_schools c
            LEFT JOIN serp_competitor_appearances sca ON c.id = sca.competitor_id
            GROUP BY c.id, c.domain, c.org_type, c.notes, c.last_seen_at, c.created_at, c.updated_at
            ORDER BY competitiveness DESC, c.domain ASC
        """)
        
        competitors = cursor.fetchall()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏
        for comp in competitors:
            if comp.get('last_seen_at'):
                comp['last_seen_at'] = comp['last_seen_at'].isoformat()
            if comp.get('created_at'):
                comp['created_at'] = comp['created_at'].isoformat()
            if comp.get('updated_at'):
                comp['updated_at'] = comp['updated_at'].isoformat()
        
        cursor.close()
        
        return jsonify({
            'success': True,
            'competitors': competitors
        })
        
    except Exception as e:
        print(f"‚ùå Error getting competitors: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({'success': False, 'error': str(e)}), 500
        
    finally:
        if connection:
            connection.close()

@competitors_bp.route('/add', methods=['POST'])
def add_competitor():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞"""
    connection = None
    try:
        data = request.json
        domain = data.get('domain', '').strip().lower()
        org_type = data.get('org_type', '–®–∫–æ–ª–∞')
        notes = data.get('notes', '')
        
        if not domain:
            return jsonify({'success': False, 'error': '–î–æ–º–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –∏ www
        domain = domain.replace('http://', '').replace('https://', '').replace('www.', '')
        # –£–±–∏—Ä–∞–µ–º –ø—É—Ç—å, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –¥–æ–º–µ–Ω
        if '/' in domain:
            domain = domain.split('/')[0]
        
        connection = get_db_connection()
        cursor = connection.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        cursor.execute("SELECT id FROM competitor_schools WHERE domain = %s", (domain,))
        existing = cursor.fetchone()
        
        if existing:
            return jsonify({'success': False, 'error': '–¢–∞–∫–æ–π –¥–æ–º–µ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}), 400
        
        # –î–æ–±–∞–≤–ª—è–µ–º
        cursor.execute("""
            INSERT INTO competitor_schools (domain, org_type, notes, created_at)
            VALUES (%s, %s, %s, NOW())
        """, (domain, org_type, notes))
        
        connection.commit()
        new_id = cursor.lastrowid
        cursor.close()
        
        return jsonify({
            'success': True,
            'message': '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω',
            'id': new_id
        })
        
    except Exception as e:
        if connection:
            connection.rollback()
        print(f"‚ùå Error adding competitor: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500
        
    finally:
        if connection:
            connection.close()

@competitors_bp.route('/update', methods=['POST'])
def update_competitor():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞"""
    connection = None
    try:
        data = request.json
        competitor_id = data.get('id')
        field = data.get('field')
        value = data.get('value')
        
        if not competitor_id or not field:
            return jsonify({'success': False, 'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'}), 400
        
        # –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        allowed_fields = ['org_type', 'notes', 'domain']
        if field not in allowed_fields:
            return jsonify({'success': False, 'error': '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –ø–æ–ª–µ'}), 400
        
        connection = get_db_connection()
        cursor = connection.cursor()
        
        # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ–º–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        if field == 'domain':
            value = value.strip().lower().replace('http://', '').replace('https://', '').replace('www.', '')
            if '/' in value:
                value = value.split('/')[0]
            
            cursor.execute(
                "SELECT id FROM competitor_schools WHERE domain = %s AND id != %s",
                (value, competitor_id)
            )
            if cursor.fetchone():
                return jsonify({'success': False, 'error': '–¢–∞–∫–æ–π –¥–æ–º–µ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}), 400
        
        # –û–±–Ω–æ–≤–ª—è–µ–º
        query = f"UPDATE competitor_schools SET {field} = %s, updated_at = NOW() WHERE id = %s"
        cursor.execute(query, (value, competitor_id))
        connection.commit()
        cursor.close()
        
        return jsonify({
            'success': True,
            'message': '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
        })
        
    except Exception as e:
        if connection:
            connection.rollback()
        print(f"‚ùå Error updating competitor: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500
        
    finally:
        if connection:
            connection.close()

@competitors_bp.route('/delete', methods=['POST'])
def delete_competitors():
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"""
    connection = None
    try:
        data = request.json
        ids = data.get('ids', [])
        
        if not ids:
            return jsonify({'success': False, 'error': '–ù–µ —É–∫–∞–∑–∞–Ω—ã ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è'}), 400
        
        connection = get_db_connection()
        cursor = connection.cursor()
        
        # –£–¥–∞–ª—è–µ–º
        placeholders = ','.join(['%s'] * len(ids))
        query = f"DELETE FROM competitor_schools WHERE id IN ({placeholders})"
        cursor.execute(query, ids)
        
        connection.commit()
        deleted_count = cursor.rowcount
        cursor.close()
        
        return jsonify({
            'success': True,
            'message': f'–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted_count}'
        })
        
    except Exception as e:
        if connection:
            connection.rollback()
        print(f"‚ùå Error deleting competitors: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500
        
    finally:
        if connection:
            connection.close()

@competitors_bp.route('/stats', methods=['GET'])
def get_competitor_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º"""
    connection = None
    try:
        connection = get_db_connection()
        cursor = connection.cursor()
        
        cursor.execute("""
            SELECT 
                COUNT(*) as total,
                SUM(CASE WHEN org_type = '–®–∫–æ–ª–∞' THEN 1 ELSE 0 END) as schools,
                SUM(CASE WHEN org_type = '–ë–∞–∑–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤' THEN 1 ELSE 0 END) as tutor_bases,
                SUM(CASE WHEN org_type = '–ù–µ —à–∫–æ–ª–∞' THEN 1 ELSE 0 END) as not_schools,
                SUM(CASE WHEN org_type = '–ü–∞—Ä—Ç–Ω—ë—Ä' THEN 1 ELSE 0 END) as partners
            FROM competitor_schools
        """)
        
        stats = cursor.fetchone()
        cursor.close()
        
        return jsonify({
            'success': True,
            'stats': stats
        })
        
    except Exception as e:
        print(f"‚ùå Error getting stats: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500
        
    finally:
        if connection:
            connection.close()

@competitors_bp.route('/update-competitiveness', methods=['POST'])
def update_competitiveness():
    """
    –ü–µ—Ä–µ—Å—á—ë—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SERP-–∞–Ω–∞–ª–∏–∑–∞
    """
    connection = None
    try:
        connection = get_db_connection()
        cursor = connection.cursor()
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
        cursor.execute("""
            UPDATE competitor_schools c
            SET competitiveness = (
                SELECT COUNT(DISTINCT sa.keyword_id)
                FROM serp_competitor_appearances sca
                JOIN serp_analysis_history sa ON sca.serp_analysis_id = sa.id
                WHERE sca.competitor_id = c.id
                AND sa.id IN (
                    SELECT MAX(id) 
                    FROM serp_analysis_history 
                    GROUP BY keyword_id
                )
            ),
            last_seen_at = (
                SELECT MAX(sa.analysis_date)
                FROM serp_competitor_appearances sca
                JOIN serp_analysis_history sa ON sca.serp_analysis_id = sa.id
                WHERE sca.competitor_id = c.id
            ),
            updated_at = NOW()
        """)
        
        connection.commit()
        updated_count = cursor.rowcount
        cursor.close()
        
        return jsonify({
            'success': True,
            'message': f'–û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {updated_count}'
        })
        
    except Exception as e:
        if connection:
            connection.rollback()
        print(f"‚ùå Error updating competitiveness: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500
        
    finally:
        if connection:
            connection.close()
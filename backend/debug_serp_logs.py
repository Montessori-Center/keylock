#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –≤ SERP –ª–æ–≥–∞—Ö
"""

import sys
import os
import json
import pymysql
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from config import Config

def get_db_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    return pymysql.connect(
        host=Config.DB_HOST,
        user=Config.DB_USER,
        password=Config.DB_PASSWORD,
        database=Config.DB_NAME,
        port=Config.DB_PORT,
        cursorclass=pymysql.cursors.DictCursor,
        charset='utf8mb4'
    )

def diagnose_serp_logs():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ SERP –ª–æ–≥–æ–≤"""
    
    print("=" * 80)
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SERP –õ–û–ì–û–í")
    print("=" * 80)
    
    connection = get_db_connection()
    cursor = connection.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–æ–≥–æ–≤
    cursor.execute("""
        SELECT id, keyword_text, created_at, parsed_items, analysis_result
        FROM serp_logs 
        ORDER BY created_at DESC 
        LIMIT 5
    """)
    
    logs = cursor.fetchall()
    
    if not logs:
        print("‚ùå –ù–µ—Ç SERP –ª–æ–≥–æ–≤ –≤ –ë–î")
        return
    
    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –ª–æ–≥–æ–≤: {len(logs)}\n")
    
    for i, log in enumerate(logs, 1):
        print(f"\n{'=' * 80}")
        print(f"–õ–æ–≥ #{i}: {log['keyword_text']} (ID: {log['id']})")
        print(f"–î–∞—Ç–∞: {log['created_at']}")
        print(f"{'-' * 80}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º analysis_result
        if log.get('analysis_result'):
            try:
                analysis_result = json.loads(log['analysis_result'])
                print("\n‚úÖ analysis_result —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω:")
                print(f"   - has_our_site: {analysis_result.get('has_our_site')}")
                print(f"   - our_organic_position: {analysis_result.get('our_organic_position')}")
                print(f"   - our_actual_position: {analysis_result.get('our_actual_position')}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ analysis_result: {e}")
        else:
            print("‚ö†Ô∏è analysis_result –ø—É—Å—Ç–æ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º parsed_items
        if log.get('parsed_items'):
            try:
                parsed_items = json.loads(log['parsed_items'])
                organic_results = parsed_items.get('organic', [])
                
                print(f"\n‚úÖ parsed_items —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω:")
                print(f"   - –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(organic_results)}")
                
                if organic_results:
                    print(f"\n   üìù –ü–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
                    for j, item in enumerate(organic_results[:3], 1):
                        print(f"      {j}. {item.get('domain', 'NO DOMAIN')}")
                        print(f"         organic_position: {item.get('organic_position', 'MISSING!')}")
                        print(f"         actual_position: {item.get('actual_position', 'MISSING!')}")
                        print(f"         title: {item.get('title', '')[:50]}...")
                        
                        # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π
                        if 'organic_position' not in item:
                            print(f"         ‚ö†Ô∏è WARNING: organic_position –û–¢–°–£–¢–°–¢–í–£–ï–¢!")
                        if 'actual_position' not in item:
                            print(f"         ‚ö†Ô∏è WARNING: actual_position –û–¢–°–£–¢–°–¢–í–£–ï–¢!")
                        
                        print()
                else:
                    print("   ‚ö†Ô∏è –ù–µ—Ç –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ parsed_items: {e}")
        else:
            print("‚ö†Ô∏è parsed_items –ø—É—Å—Ç–æ–π")
    
    cursor.close()
    connection.close()
    
    print("\n" + "=" * 80)
    print("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    print("=" * 80)

if __name__ == "__main__":
    try:
        diagnose_serp_logs()
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
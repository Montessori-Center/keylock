#!/usr/bin/env python3
# backend/debug_serp_logs.py
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö SERP –ª–æ–≥–æ–≤ –≤ –ë–î
"""

import pymysql
import json
import sys
from config import Config

def debug_serp_logs():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π SERP –ª–æ–≥"""
    try:
        connection = pymysql.connect(
            host=Config.DB_HOST,
            port=Config.DB_PORT,
            user=Config.DB_USER,
            password=Config.DB_PASSWORD,
            database=Config.DB_NAME,
            cursorclass=pymysql.cursors.DictCursor
        )
        
        cursor = connection.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥
        cursor.execute("""
            SELECT id, keyword_text, created_at, parsed_items, analysis_result
            FROM serp_logs 
            ORDER BY created_at DESC 
            LIMIT 1
        """)
        
        log = cursor.fetchone()
        
        if not log:
            print("‚ùå –ù–µ—Ç –ª–æ–≥–æ–≤ –≤ –ë–î")
            return
        
        print("\n" + "="*80)
        print(f"üìä –ü–û–°–õ–ï–î–ù–ò–ô SERP –õ–û–ì")
        print("="*80)
        print(f"ID: {log['id']}")
        print(f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {log['keyword_text']}")
        print(f"–î–∞—Ç–∞: {log['created_at']}")
        
        # –ü–∞—Ä—Å–∏–º parsed_items
        if log.get('parsed_items'):
            print("\n" + "-"*80)
            print("üìã PARSED_ITEMS:")
            print("-"*80)
            
            try:
                parsed_items = json.loads(log['parsed_items'])
                
                organic = parsed_items.get('organic', [])
                print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(organic)}")
                
                if organic:
                    print("\nüîç –ü–ï–†–í–´–ï 5 –û–†–ì–ê–ù–ò–ß–ï–°–ö–ò–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
                    for i, item in enumerate(organic[:5], 1):
                        print(f"\n  [{i}] {item.get('domain', 'N/A')}")
                        print(f"      organic_position: {item.get('organic_position', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')}")
                        print(f"      actual_position: {item.get('actual_position', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')}")
                        print(f"      rank_absolute: {item.get('rank_absolute', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')}")
                        print(f"      position: {item.get('position', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')}")
                        print(f"      title: {item.get('title', 'N/A')[:50]}...")
                        
                    # –ò—â–µ–º montessori.ua
                    montessori = [item for item in organic if 'montessori' in item.get('domain', '').lower()]
                    if montessori:
                        print("\nüéØ –ù–ê–ô–î–ï–ù MONTESSORI.UA:")
                        for item in montessori:
                            print(f"      domain: {item.get('domain')}")
                            print(f"      organic_position: {item.get('organic_position', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')}")
                            print(f"      actual_position: {item.get('actual_position', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')}")
                    else:
                        print("\n‚ö†Ô∏è  MONTESSORI.UA –ù–ï –ù–ê–ô–î–ï–ù –≤ organic_results")
                else:
                    print("‚ùå –ú–∞—Å—Å–∏–≤ organic –ø—É—Å—Ç–æ–π")
                    
            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ parsed_items: {e}")
        else:
            print("\n‚ùå parsed_items –ø—É—Å—Ç–æ–π –∏–ª–∏ NULL")
        
        # –ü–∞—Ä—Å–∏–º analysis_result
        if log.get('analysis_result'):
            print("\n" + "-"*80)
            print("üìä ANALYSIS_RESULT:")
            print("-"*80)
            
            try:
                analysis = json.loads(log['analysis_result'])
                
                print(f"  has_our_site: {analysis.get('has_our_site', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')}")
                print(f"  our_organic_position: {analysis.get('our_organic_position', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')}")
                print(f"  our_actual_position: {analysis.get('our_actual_position', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')}")
                print(f"  has_ads: {analysis.get('has_ads', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')}")
                print(f"  has_google_maps: {analysis.get('has_google_maps', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')}")
                print(f"  intent_type: {analysis.get('intent_type', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')}")
                
            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ analysis_result: {e}")
        else:
            print("\n‚ùå analysis_result –ø—É—Å—Ç–æ–π –∏–ª–∏ NULL")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º campaign_sites
        print("\n" + "-"*80)
        print("üè¢ CAMPAIGN_SITES:")
        print("-"*80)
        
        cursor.execute("SELECT id, campaign_id, domain FROM campaign_sites")
        sites = cursor.fetchall()
        
        if sites:
            for site in sites:
                print(f"  Campaign ID {site['campaign_id']}: {site['domain']}")
        else:
            print("  ‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ campaign_sites")
        
        cursor.close()
        connection.close()
        
        print("\n" + "="*80)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    debug_serp_logs()
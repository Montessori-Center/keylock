# init_db.py - –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from config import Config
import pymysql

def check_database_exists():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ë–î"""
    try:
        connection = pymysql.connect(
            host=Config.DB_HOST,
            port=Config.DB_PORT,
            user=Config.DB_USER,
            password=Config.DB_PASSWORD
        )
        cursor = connection.cursor()
        cursor.execute(f"SHOW DATABASES LIKE '{Config.DB_NAME}'")
        result = cursor.fetchone()
        
        if not result:
            print(f"‚ùå –ë–î {Config.DB_NAME} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞—é...")
            cursor.execute(f"CREATE DATABASE IF NOT EXISTS {Config.DB_NAME} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci")
            print(f"‚úÖ –ë–î {Config.DB_NAME} —Å–æ–∑–¥–∞–Ω–∞")
        else:
            print(f"‚úÖ –ë–î {Config.DB_NAME} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        cursor.close()
        connection.close()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL: {e}")
        return False

def check_tables_exist():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü"""
    try:
        connection = pymysql.connect(
            host=Config.DB_HOST,
            port=Config.DB_PORT,
            user=Config.DB_USER,
            password=Config.DB_PASSWORD,
            database=Config.DB_NAME
        )
        cursor = connection.cursor()
        
        cursor.execute("SHOW TABLES")
        tables = cursor.fetchall()
        table_names = [table[0] for table in tables]
        
        cursor.close()
        connection.close()
        
        required_tables = ['campaigns', 'ad_groups', 'keywords', 'app_settings']
        missing_tables = [t for t in required_tables if t not in table_names]
        
        if missing_tables:
            print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {', '.join(missing_tables)}")
            return False
        else:
            print(f"‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {', '.join(table_names)}")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return False

def create_all_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL"""
    try:
        connection = pymysql.connect(
            host=Config.DB_HOST,
            port=Config.DB_PORT,
            user=Config.DB_USER,
            password=Config.DB_PASSWORD,
            database=Config.DB_NAME
        )
        cursor = connection.cursor()
        
        print("üìã –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—ã...")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        # cursor.execute("SET FOREIGN_KEY_CHECKS = 0")
        # cursor.execute("DROP TABLE IF EXISTS keywords")
        # cursor.execute("DROP TABLE IF EXISTS ad_groups")
        # cursor.execute("DROP TABLE IF EXISTS campaigns")
        # cursor.execute("DROP TABLE IF EXISTS app_settings")
        # cursor.execute("SET FOREIGN_KEY_CHECKS = 1")
        
        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã
        sql_commands = [
            # –¢–∞–±–ª–∏—Ü–∞ campaigns
            """
            CREATE TABLE IF NOT EXISTS campaigns (
                id INT AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                status ENUM('Enabled', 'Paused', 'Removed') DEFAULT 'Enabled',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
            """,
            
            # –¢–∞–±–ª–∏—Ü–∞ ad_groups
            """
            CREATE TABLE IF NOT EXISTS ad_groups (
                id INT AUTO_INCREMENT PRIMARY KEY,
                campaign_id INT NOT NULL,
                name VARCHAR(255) NOT NULL,
                status ENUM('Enabled', 'Paused', 'Removed') DEFAULT 'Enabled',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                FOREIGN KEY (campaign_id) REFERENCES campaigns(id) ON DELETE CASCADE
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
            """,
            
            # –¢–∞–±–ª–∏—Ü–∞ keywords - —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏
            """
            CREATE TABLE IF NOT EXISTS keywords (
                id INT AUTO_INCREMENT PRIMARY KEY,
                campaign_id INT NOT NULL,
                ad_group_id INT NOT NULL,
                keyword VARCHAR(500) NOT NULL,
                criterion_type ENUM('Phrase', 'Broad', 'Exact') DEFAULT 'Phrase',
                max_cpc DECIMAL(10, 2),
                max_cpm DECIMAL(10, 2),
                max_cpv DECIMAL(10, 2),
                first_page_bid DECIMAL(10, 2),
                top_of_page_bid DECIMAL(10, 2),
                first_position_bid DECIMAL(10, 2),
                quality_score INT,
                landing_page_experience VARCHAR(50),
                expected_ctr VARCHAR(50),
                ad_relevance VARCHAR(50),
                final_url TEXT,
                final_mobile_url TEXT,
                tracking_template TEXT,
                final_url_suffix VARCHAR(255),
                custom_parameters TEXT,
                status ENUM('Enabled', 'Paused', 'Removed') DEFAULT 'Enabled',
                approval_status VARCHAR(50),
                comment TEXT,
                has_ads BOOLEAN DEFAULT FALSE,
                has_school_sites BOOLEAN DEFAULT FALSE,
                has_google_maps BOOLEAN DEFAULT FALSE,
                has_our_site BOOLEAN DEFAULT FALSE,
                intent_type VARCHAR(50),
                recommendation TEXT,
                avg_monthly_searches INT,
                three_month_change DECIMAL(10, 2),
                yearly_change DECIMAL(10, 2),
                competition VARCHAR(50),
                competition_percent DECIMAL(5, 2),
                min_top_of_page_bid DECIMAL(10, 2),
                max_top_of_page_bid DECIMAL(10, 2),
                ad_impression_share DECIMAL(5, 2),
                organic_average_position DECIMAL(5, 2),
                organic_impression_share DECIMAL(5, 2),
                labels TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                FOREIGN KEY (campaign_id) REFERENCES campaigns(id) ON DELETE CASCADE,
                FOREIGN KEY (ad_group_id) REFERENCES ad_groups(id) ON DELETE CASCADE,
                INDEX idx_keyword (keyword),
                INDEX idx_status (status)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
            """,
            
            # –¢–∞–±–ª–∏—Ü–∞ app_settings
            """
            CREATE TABLE IF NOT EXISTS app_settings (
                id INT AUTO_INCREMENT PRIMARY KEY,
                setting_key VARCHAR(100) UNIQUE NOT NULL,
                setting_value TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
            """
        ]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É
        for i, sql in enumerate(sql_commands, 1):
            try:
                cursor.execute(sql)
                connection.commit()
                print(f"  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ {i}/4 —Å–æ–∑–¥–∞–Ω–∞")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã {i}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–ª–æ—Å—å
        cursor.execute("SHOW TABLES")
        tables = cursor.fetchall()
        table_names = [table[0] for table in tables]
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–∞–±–ª–∏—Ü—ã: {', '.join(table_names)}")
        
        cursor.close()
        connection.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        return False

def insert_test_data():
    """–í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        connection = pymysql.connect(
            host=Config.DB_HOST,
            port=Config.DB_PORT,
            user=Config.DB_USER,
            password=Config.DB_PASSWORD,
            database=Config.DB_NAME
        )
        cursor = connection.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        cursor.execute("SELECT COUNT(*) FROM campaigns")
        count = cursor.fetchone()[0]
        
        if count == 0:
            print("üìù –î–æ–±–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é
            cursor.execute("INSERT INTO campaigns (name) VALUES ('montessori.ua')")
            campaign_id = cursor.lastrowid
            connection.commit()
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            ad_groups = [
                '001 –£—Ä–æ–∫–∏ —Ñ–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ (RU)',
                '002 –£—Ä–æ–∫–∏ –≤–æ–∫–∞–ª–∞ (RU)',
                '003 –£—Ä–æ–∫–∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –≥–∏—Ç–∞—Ä—ã (RU)',
                '004 –£—Ä–æ–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ–≥–∏—Ç–∞—Ä—ã (RU)',
                '005 –£—Ä–æ–∫–∏ –±–∞—Å-–≥–∏—Ç–∞—Ä—ã (RU)',
                '006 –£—Ä–æ–∫–∏ –±–∞—Ä–∞–±–∞–Ω–æ–≤ (RU)',
                '007 –£—Ä–æ–∫–∏ —Å–∫—Ä–∏–ø–∫–∏ (RU)',
                '008 –£—Ä–æ–∫–∏ –≤–∏–æ–ª–æ–Ω—á–µ–ª–∏ (RU)',
                '009 –£—Ä–æ–∫–∏ —Å–∞–∫—Å–æ—Ñ–æ–Ω–∞ (RU)',
                '010 –£—Ä–æ–∫–∏ —Ñ–ª–µ–π—Ç—ã (RU)'
            ]
            
            for ad_group_name in ad_groups:
                cursor.execute("INSERT INTO ad_groups (campaign_id, name) VALUES (%s, %s)", 
                              (campaign_id, ad_group_name))
            
            connection.commit()
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: 1 –∫–∞–º–ø–∞–Ω–∏—è, {len(ad_groups)} –≥—Ä—É–ø–ø –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            
            # –î–æ–±–∞–≤–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            test_keywords = [
                ('—É—Ä–æ–∫–∏ —Å–∞–∫—Å–æ—Ñ–æ–Ω–∞ –∫–∏–µ–≤', 9, 'Phrase', 4.01, '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π', 320),
                ('–æ–±—É—á–µ–Ω–∏–µ —Å–∞–∫—Å–æ—Ñ–æ–Ω—É', 9, 'Phrase', 3.61, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π', 1200),
                ('—à–∫–æ–ª–∞ —Å–∞–∫—Å–æ—Ñ–æ–Ω–∞', 9, 'Phrase', 3.61, '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π', 480)
            ]
            
            for keyword, ad_group_id, criterion_type, max_cpc, intent_type, searches in test_keywords:
                cursor.execute("""
                    INSERT INTO keywords (campaign_id, ad_group_id, keyword, criterion_type, max_cpc, intent_type, avg_monthly_searches)
                    VALUES (%s, %s, %s, %s, %s, %s, %s)
                """, (campaign_id, ad_group_id, keyword, criterion_type, max_cpc, intent_type, searches))
            
            connection.commit()
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(test_keywords)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
            
        else:
            print(f"‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {count} –∫–∞–º–ø–∞–Ω–∏–π")
        
        cursor.close()
        connection.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        print(f"   –î–µ—Ç–∞–ª–∏: {str(e)}")
        return False

def show_statistics():
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î"""
    try:
        connection = pymysql.connect(
            host=Config.DB_HOST,
            port=Config.DB_PORT,
            user=Config.DB_USER,
            password=Config.DB_PASSWORD,
            database=Config.DB_NAME
        )
        cursor = connection.cursor()
        
        stats = {}
        tables = ['campaigns', 'ad_groups', 'keywords', 'app_settings']
        
        for table in tables:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                stats[table] = count
            except:
                stats[table] = '–Ω–µ —Å–æ–∑–¥–∞–Ω–∞'
        
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:")
        print(f"   –ö–∞–º–ø–∞–Ω–∏–π: {stats['campaigns']}")
        print(f"   –ì—Ä—É–ø–ø –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {stats['ad_groups']}")
        print(f"   –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {stats['keywords']}")
        print(f"   –ù–∞—Å—Ç—Ä–æ–µ–∫: {stats['app_settings']}")
        
        cursor.close()
        connection.close()
        
    except Exception as e:
        print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")

def main():
    print("=" * 50)
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –¥–ª—è Keyword Lock")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞—ë–º –ë–î
    if not check_database_exists():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MySQL")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ")
        return False
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    if not check_tables_exist():
        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü –Ω–µ—Ç –∏–ª–∏ –Ω–µ –≤—Å–µ - —Å–æ–∑–¥–∞—ë–º
        print("\nüìã –°–æ–∑–¥–∞—é –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã...")
        if not create_all_tables():
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã")
            return False
    
    # 3. –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    insert_test_data()
    
    # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    show_statistics()
    
    print("\n" + "=" * 50)
    print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å: python3 app.py")
    print("=" * 50)
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)